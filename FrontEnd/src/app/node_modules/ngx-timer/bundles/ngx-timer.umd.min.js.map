{"version":3,"sources":["ng://ngx-timer/lib/countup-timer/countup-timer.service.ts","ng://ngx-timer/lib/countup-timer/countup-timer.model.ts","ng://ngx-timer/lib/countup-timer/countup-timer.component.ts","ng://ngx-timer/lib/countdown-timer/countdown-timer.model.ts","ng://ngx-timer/lib/countdown-timer/countdown-timer.service.ts","ng://ngx-timer/lib/countdown-timer/countdown-timer.component.ts","ng://ngx-timer/lib/stop-watch/stop-watch.service.ts","ng://ngx-timer/lib/stop-watch/stop-watch.component.ts","ng://ngx-timer/lib/ngx-timer.module.ts"],"names":["CountupTimerService","Injectable","args","providedIn","_this","this","timerValue","seconds","mins","hours","isTimerStart","totalSeconds","currentOperationId","startTimer","startTime","currentDate","Date","startedTime","Math","round","getTime","pauseTimer","endTime","endedDate","stopTimer","getTimerValue","Observable","obs","intervalSubscription","unsubscribe","interval","subscribe","int","setTimervalue","totalSecondsForMinutes","trunc","next","complete","error","val","valString","length","countUpTimerConfigModel","timerTexts","CountupTimerComponent","prototype","ngOnInit","timerConfig","timerTextConfig","countUpTimerConfig","Object","assign","ngOnDestroy","timerSubscription","Component","selector","template","Input","countupTimerService","timerObj","res","console","log","countDownTimerConfigModel","countDownTimerTexts","START","PAUSE","STOP","CountdownTimerService","onTimerStatusChange","EventEmitter","emit","TimerStaus","resumeTimer","CountdownTimerComponent","countDownTimerConfig","countdownTimerService","StopWatchService","miliseconds","StopWatchComponent","NgxTimerModule","NgModule","declarations","imports","CommonModule","exports","entryComponents","providers"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, interval } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CountupTimerService {\r\n\r\n  //Init\r\n  public timerValue = {\r\n    seconds: '00',\r\n    mins: '00',\r\n    hours: '00',\r\n  }\r\n  public isTimerStart: boolean = false;\r\n  public interval: Observable<any>;\r\n  public intervalSubscription;\r\n  public totalSeconds: number = 0;\r\n  public currentOperationId: number = 0;\r\n\r\n  constructor() {\r\n    this.interval = interval(1000);\r\n  }\r\n\r\n  //start timer\r\n  startTimer = (startTime?: any) => {\r\n    if (startTime) {\r\n      let currentDate = new Date();\r\n      let startedTime = new Date(startTime);\r\n      this.totalSeconds = Math.round((currentDate.getTime() - startedTime.getTime()) / 1000);\r\n    }\r\n    this.isTimerStart = true;\r\n    return true;\r\n  }\r\n\r\n  //end timer\r\n  pauseTimer = (startTime?: any, endTime?: any) => {\r\n    if (startTime && endTime) {\r\n      let endedDate = new Date(endTime);\r\n      let startedTime = new Date(startTime);\r\n      this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);\r\n    }\r\n    this.isTimerStart = false;\r\n    return false;\r\n  }\r\n\r\n  //reset Timer\r\n  stopTimer = () => {\r\n    this.isTimerStart = false;\r\n    this.totalSeconds = 0;\r\n  }\r\n\r\n  //get timer value Obj\r\n  getTimerValue = (): Observable<any> => {\r\n    return new Observable(obs => {\r\n      if (this.intervalSubscription) {\r\n        this.intervalSubscription.unsubscribe();\r\n      }\r\n      this.intervalSubscription = this.interval.subscribe(int => {\r\n        if (this.isTimerStart) {\r\n          ++this.totalSeconds;\r\n          this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\r\n          let totalSecondsForMinutes = 0;\r\n          totalSecondsForMinutes = (Math.trunc(this.totalSeconds / 60) >= 60) ? (this.totalSeconds / 60) % 60 : this.totalSeconds / 60;\r\n          this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\r\n          this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\r\n          obs.next(this.timerValue);\r\n          obs.complete();\r\n        } else {\r\n          if (this.totalSeconds > 0) {\r\n            this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\r\n            let totalSecondsForMinutes = 0;\r\n            totalSecondsForMinutes = (Math.trunc(this.totalSeconds / 60) >= 60) ? (this.totalSeconds / 60) % 60 : this.totalSeconds / 60;\r\n            this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\r\n            this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\r\n          } else {\r\n            this.timerValue.hours = \"00\";\r\n            this.timerValue.mins = \"00\";\r\n            this.timerValue.seconds = \"00\";\r\n          }\r\n          obs.next(this.timerValue);\r\n          obs.complete();\r\n        }\r\n      }, error => {\r\n        obs.error(error);\r\n        obs.complete();\r\n      });\r\n    });\r\n  }\r\n\r\n  //set timer value\r\n  setTimervalue = (val) => {\r\n    let valString = val + \"\";\r\n    return (valString.length < 2) ? \"0\" + valString : valString;\r\n  }\r\n}\r\n","export class countUpTimerConfigModel {\r\n    timerClass?:string;\r\n    timerTexts?:timerTexts;\r\n}\r\n\r\nexport class timerTexts{\r\n    hourText?:string;\r\n    minuteText?:string;\r\n    secondsText?:string;\r\n}","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { CountupTimerService } from './countup-timer.service';\nimport { countUpTimerConfigModel, timerTexts } from './countup-timer.model';\n\n@Component({\n  selector: 'countup-timer',\n  templateUrl: './countup-timer.component.html',\n  styleUrls: ['./countup-timer.component.scss']\n})\nexport class CountupTimerComponent implements OnInit, OnDestroy {\n\n  @Input() startTime: String;\n  @Input() countUpTimerConfig: countUpTimerConfigModel;\n\n  //Init\n  timerObj: any = {};\n  private timerSubscription;\n  timerConfig: countUpTimerConfigModel;\n  timerTextConfig: timerTexts;\n\n  constructor(private countupTimerService: CountupTimerService) {}\n\n  ngOnInit() {\n    this.getTimerValue();\n    this.timerConfig = new countUpTimerConfigModel();\n    this.timerTextConfig = new timerTexts();\n    this.timerConfig = this.countUpTimerConfig ? Object.assign(this.countUpTimerConfig) : null;\n    this.timerTextConfig = this.countUpTimerConfig && this.countUpTimerConfig.timerTexts ? Object.assign(this.countUpTimerConfig.timerTexts) :  null;\n  }\n\n  //get timer value\n  getTimerValue = () => {\n    this.timerSubscription = this.countupTimerService.getTimerValue().subscribe(res => {\n      this.timerObj = Object.assign(res);\n    }, error => {\n      console.log(error);\n      console.log('Failed to get timer value');\n    });\n  }\n\n  ngOnDestroy() {\n    this.timerSubscription.unsubscribe();\n  }\n\n}\n","export class countDownTimerConfigModel {\r\n    timerClass?: string;\r\n    timerTexts?: countDownTimerTexts;\r\n}\r\n\r\nexport class countDownTimerTexts {\r\n    hourText?: string;\r\n    minuteText?: string;\r\n    secondsText?: string;\r\n}\r\n\r\n\r\nexport enum TimerStaus {\r\n  START = \"START\",\r\n  PAUSE = \"PAUSE\",\r\n  STOP = \"STOP\"\r\n}","import { Injectable, EventEmitter } from '@angular/core';\r\nimport { Observable, interval } from 'rxjs';\r\nimport { TimerStaus } from './countdown-timer.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CountdownTimerService {\r\n\r\n  public onTimerStatusChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  //Init\r\n  public timerValue = {\r\n    seconds: '00',\r\n    mins: '00',\r\n    hours: '00',\r\n  }\r\n  public isTimerStart: boolean = false;\r\n  public interval: Observable<any>;\r\n  public intervalSubscription;\r\n  public totalSeconds: number = 0;\r\n  public currentOperationId: number = 0;\r\n  constructor() {\r\n    this.interval = interval(1000);\r\n  }\r\n\r\n  //start timer\r\n  startTimer = (startTime: any) => {\r\n    if (startTime) {\r\n      let currentDate = new Date();\r\n      let startedTime = new Date(startTime);\r\n      this.totalSeconds = (Math.round((currentDate.getTime() - startedTime.getTime()) / 1000)) * -1;\r\n    }\r\n    this.isTimerStart = true;\r\n    this.onTimerStatusChange.emit(TimerStaus.START);\r\n    return true;\r\n  }\r\n\r\n  //end timer\r\n  pauseTimer = (startTime?: any, endTime?: any) => {\r\n    if (startTime && endTime) {\r\n      let endedDate = new Date(endTime);\r\n      let startedTime = new Date(startTime);\r\n      this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);\r\n    }\r\n    this.isTimerStart = false;\r\n    this.onTimerStatusChange.emit(TimerStaus.PAUSE);\r\n    return false;\r\n  }\r\n\r\n  //reset Timer\r\n  stopTimer = () => {\r\n    this.isTimerStart = false;\r\n    this.totalSeconds = 0;\r\n    this.onTimerStatusChange.emit(TimerStaus.STOP);\r\n  }\r\n\r\n  //resume Timer\r\n  resumeTimer = () => {\r\n    this.isTimerStart = true;\r\n  }\r\n\r\n  //get timer value Obj\r\n  getTimerValue = (): Observable<any> => {\r\n    return new Observable(obs => {\r\n      if (this.intervalSubscription) {\r\n        this.intervalSubscription.unsubscribe();\r\n      }\r\n      this.intervalSubscription = this.interval.subscribe(int => {\r\n        if (this.isTimerStart && this.totalSeconds > 0) {\r\n          --this.totalSeconds;\r\n          this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\r\n          let totalSecondsForMinutes = 0;\r\n          totalSecondsForMinutes = (Math.trunc(this.totalSeconds / 60) >= 60) ? (this.totalSeconds / 60) % 60 : this.totalSeconds / 60;\r\n          this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\r\n          this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\r\n          obs.next(this.timerValue);\r\n          obs.complete();\r\n        } else {\r\n          if (this.totalSeconds > 0) {\r\n            this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\r\n            let totalSecondsForMinutes = 0;\r\n            totalSecondsForMinutes = (Math.trunc(this.totalSeconds / 60) >= 60) ? (this.totalSeconds / 60) % 60 : this.totalSeconds / 60;\r\n            this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\r\n            this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\r\n          } else {\r\n            this.timerValue.hours = \"00\";\r\n            this.timerValue.mins = \"00\";\r\n            this.timerValue.seconds = \"00\";\r\n            this.stopTimer();\r\n          }\r\n          obs.next(this.timerValue);\r\n          obs.complete();\r\n        }\r\n      }, error => {\r\n        obs.error(error);\r\n        obs.complete();\r\n      });\r\n    });\r\n  }\r\n\r\n  //set timer value\r\n  setTimervalue = (val) => {\r\n    let valString = val + \"\";\r\n    return (valString.length < 2) ? \"0\" + valString : valString;\r\n  }\r\n}\r\n\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { countDownTimerConfigModel, countDownTimerTexts } from './countdown-timer.model';\r\nimport { CountdownTimerService } from './countdown-timer.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'countdown-timer',\r\n  templateUrl: './countdown-timer.component.html',\r\n  styleUrls: ['./countdown-timer.component.scss']\r\n})\r\nexport class CountdownTimerComponent implements OnInit {\r\n\r\n  @Input() startTime: String;\r\n  @Input() countDownTimerConfig: countDownTimerConfigModel;\r\n\r\n  //Init\r\n  private timerSubscription:Subscription;\r\n  timerObj: any = {};\r\n  timerConfig: countDownTimerConfigModel;\r\n  timerTextConfig: countDownTimerTexts;\r\n\r\n  constructor(private countdownTimerService: CountdownTimerService) {}\r\n\r\n  ngOnInit() {\r\n    this.getTimerValue();\r\n    this.timerConfig = new countDownTimerConfigModel();\r\n    this.timerTextConfig = new countDownTimerTexts();\r\n    this.timerConfig = this.countDownTimerConfig ? Object.assign(this.countDownTimerConfig) : null;\r\n    this.timerTextConfig = this.countDownTimerConfig && this.countDownTimerConfig.timerTexts ? Object.assign(this.countDownTimerConfig.timerTexts) :  null;\r\n  }\r\n\r\n  //get timer value\r\n  getTimerValue = () => {\r\n    this.timerSubscription = this.countdownTimerService.getTimerValue().subscribe(res => {\r\n      this.timerObj = Object.assign(res);\r\n    }, error => {\r\n      console.log(error);\r\n      console.log('Failed to get timer value');\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.timerSubscription.unsubscribe();\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable, interval } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StopWatchService {\n\n  //Init\n  public timerValue = {\n    miliseconds: '00',\n    seconds: '00',\n    mins: '00',\n    hours: '00',\n  }\n  public isTimerStart: boolean = false;\n  public interval: Observable<any>;\n  public intervalSubscription;\n  public totalSeconds: number = 0;\n  public currentOperationId: number = 0;\n\n  constructor() {\n    this.interval = interval(10000);\n  }\n\n  //start timer\n  startTimer = () => {\n    debugger;\n    this.isTimerStart = true;\n    return true;\n  }\n\n  //end timer\n  pauseTimer = (startTime?: any, endTime?: any) => {\n    if (startTime && endTime) {\n      let endedDate = new Date(endTime);\n      let startedTime = new Date(startTime);\n      this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);\n    }\n    this.isTimerStart = false;\n    return false;\n  }\n\n  //reset Timer\n  stopTimer = () => {\n    this.isTimerStart = false;\n    this.totalSeconds = 0;\n  }\n\n  //resume Timer\n  resumeTimer = () => {\n    this.isTimerStart = true;\n  }\n\n  //get timer value Obj\n  getTimerValue = (): Observable<any> => {\n    return new Observable(obs => {\n      if (this.intervalSubscription) {\n        this.intervalSubscription.unsubscribe();\n      }\n      this.intervalSubscription = this.interval.subscribe(int => {\n        if (this.isTimerStart && this.totalSeconds > 0) {\n          --this.totalSeconds;\n          this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\n          let totalSecondsForMinutes = 0;\n          totalSecondsForMinutes = (Math.trunc(this.totalSeconds / 60) >= 60) ? (this.totalSeconds / 60) % 60 : this.totalSeconds / 60;\n          this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\n          this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\n          obs.next(this.timerValue);\n          obs.complete();\n        } else {\n          if (this.totalSeconds > 0) {\n            this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\n            let totalSecondsForMinutes = 0;\n            totalSecondsForMinutes = (Math.trunc(this.totalSeconds / 60) >= 60) ? (this.totalSeconds / 60) % 60 : this.totalSeconds / 60;\n            this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\n            this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\n          } else {\n            this.timerValue.hours = \"00\";\n            this.timerValue.mins = \"00\";\n            this.timerValue.seconds = \"00\";\n          }\n          obs.next(this.timerValue);\n          obs.complete();\n        }\n      }, error => {\n        obs.error(error);\n        obs.complete();\n      });\n    });\n  }\n\n  //set timer value\n  setTimervalue = (val) => {\n    let valString = val + \"\";\n    return (valString.length < 2) ? \"0\" + valString : valString;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StopWatchService } from './stop-watch.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'stop-watch',\n  templateUrl: './stop-watch.component.html',\n  styleUrls: ['./stop-watch.component.scss']\n})\nexport class StopWatchComponent implements OnInit {\n\n  //Init\n  private timerSubscription:Subscription;\n  timerObj: any = {};\n  // timerConfig: countDownTimerConfigModel;\n  // timerTextConfig: countDownTimerTexts;\n\n  constructor(private countdownTimerService: StopWatchService) {}\n\n  ngOnInit() {\n    this.getTimerValue();\n    // this.timerConfig = new countDownTimerConfigModel();\n    // this.timerTextConfig = new countDownTimerTexts();\n    // this.timerConfig = this.countDownTimerConfig ? Object.assign(this.countDownTimerConfig) : null;\n    // this.timerTextConfig = this.countDownTimerConfig && this.countDownTimerConfig.timerTexts ? Object.assign(this.countDownTimerConfig.timerTexts) :  null;\n  }\n\n  //get timer value\n  getTimerValue = () => {\n    this.timerSubscription = this.countdownTimerService.getTimerValue().subscribe(res => {\n      this.timerObj = Object.assign(res);\n    }, error => {\n      console.log(error);\n      console.log('Failed to get timer value');\n    });\n  }\n\n  ngOnDestroy() {\n    this.timerSubscription.unsubscribe();\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { CountupTimerComponent } from './countup-timer/countup-timer.component';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CountdownTimerComponent } from './countdown-timer/countdown-timer.component';\r\nimport { CountupTimerService } from './countup-timer/countup-timer.service';\r\nimport { CountdownTimerService } from './countdown-timer/countdown-timer.service';\r\nimport { StopWatchComponent } from './stop-watch/stop-watch.component';\r\nimport { StopWatchService } from './stop-watch/stop-watch.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CountupTimerComponent, \r\n    CountdownTimerComponent, \r\n    StopWatchComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    CountupTimerComponent,\r\n    CountdownTimerComponent,\r\n    StopWatchComponent\r\n  ],\r\n  entryComponents:[\r\n    CountupTimerComponent,\r\n    CountdownTimerComponent,\r\n    StopWatchComponent\r\n  ],\r\n  providers:[\r\n    CountupTimerService,\r\n    CountdownTimerService,\r\n    StopWatchService\r\n  ]\r\n})\r\nexport class NgxTimerModule { }\r\n"]}