/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
import { Observable, interval } from 'rxjs';
import { TimerStaus } from './countdown-timer.model';
import * as i0 from "@angular/core";
export class CountdownTimerService {
    constructor() {
        this.onTimerStatusChange = new EventEmitter();
        //Init
        this.timerValue = {
            seconds: '00',
            mins: '00',
            hours: '00',
        };
        this.isTimerStart = false;
        this.totalSeconds = 0;
        this.currentOperationId = 0;
        //start timer
        this.startTimer = (/**
         * @param {?} startTime
         * @return {?}
         */
        (startTime) => {
            if (startTime) {
                /** @type {?} */
                let currentDate = new Date();
                /** @type {?} */
                let startedTime = new Date(startTime);
                this.totalSeconds = (Math.round((currentDate.getTime() - startedTime.getTime()) / 1000)) * -1;
            }
            this.isTimerStart = true;
            this.onTimerStatusChange.emit(TimerStaus.START);
            return true;
        });
        //end timer
        this.pauseTimer = (/**
         * @param {?=} startTime
         * @param {?=} endTime
         * @return {?}
         */
        (startTime, endTime) => {
            if (startTime && endTime) {
                /** @type {?} */
                let endedDate = new Date(endTime);
                /** @type {?} */
                let startedTime = new Date(startTime);
                this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);
            }
            this.isTimerStart = false;
            this.onTimerStatusChange.emit(TimerStaus.PAUSE);
            return false;
        });
        //reset Timer
        this.stopTimer = (/**
         * @return {?}
         */
        () => {
            this.isTimerStart = false;
            this.totalSeconds = 0;
            this.onTimerStatusChange.emit(TimerStaus.STOP);
        });
        //resume Timer
        this.resumeTimer = (/**
         * @return {?}
         */
        () => {
            this.isTimerStart = true;
        });
        //get timer value Obj
        this.getTimerValue = (/**
         * @return {?}
         */
        () => {
            return new Observable((/**
             * @param {?} obs
             * @return {?}
             */
            obs => {
                if (this.intervalSubscription) {
                    this.intervalSubscription.unsubscribe();
                }
                this.intervalSubscription = this.interval.subscribe((/**
                 * @param {?} int
                 * @return {?}
                 */
                int => {
                    if (this.isTimerStart && this.totalSeconds > 0) {
                        --this.totalSeconds;
                        this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);
                        /** @type {?} */
                        let totalSecondsForMinutes = 0;
                        totalSecondsForMinutes = (Math.trunc(this.totalSeconds / 60) >= 60) ? (this.totalSeconds / 60) % 60 : this.totalSeconds / 60;
                        this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));
                        this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));
                        obs.next(this.timerValue);
                        obs.complete();
                    }
                    else {
                        if (this.totalSeconds > 0) {
                            this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);
                            /** @type {?} */
                            let totalSecondsForMinutes = 0;
                            totalSecondsForMinutes = (Math.trunc(this.totalSeconds / 60) >= 60) ? (this.totalSeconds / 60) % 60 : this.totalSeconds / 60;
                            this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));
                            this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));
                        }
                        else {
                            this.timerValue.hours = "00";
                            this.timerValue.mins = "00";
                            this.timerValue.seconds = "00";
                            this.stopTimer();
                        }
                        obs.next(this.timerValue);
                        obs.complete();
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    obs.error(error);
                    obs.complete();
                }));
            }));
        });
        //set timer value
        this.setTimervalue = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            /** @type {?} */
            let valString = val + "";
            return (valString.length < 2) ? "0" + valString : valString;
        });
        this.interval = interval(1000);
    }
}
CountdownTimerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
CountdownTimerService.ctorParameters = () => [];
/** @nocollapse */ CountdownTimerService.ngInjectableDef = i0.defineInjectable({ factory: function CountdownTimerService_Factory() { return new CountdownTimerService(); }, token: CountdownTimerService, providedIn: "root" });
if (false) {
    /** @type {?} */
    CountdownTimerService.prototype.onTimerStatusChange;
    /** @type {?} */
    CountdownTimerService.prototype.timerValue;
    /** @type {?} */
    CountdownTimerService.prototype.isTimerStart;
    /** @type {?} */
    CountdownTimerService.prototype.interval;
    /** @type {?} */
    CountdownTimerService.prototype.intervalSubscription;
    /** @type {?} */
    CountdownTimerService.prototype.totalSeconds;
    /** @type {?} */
    CountdownTimerService.prototype.currentOperationId;
    /** @type {?} */
    CountdownTimerService.prototype.startTimer;
    /** @type {?} */
    CountdownTimerService.prototype.pauseTimer;
    /** @type {?} */
    CountdownTimerService.prototype.stopTimer;
    /** @type {?} */
    CountdownTimerService.prototype.resumeTimer;
    /** @type {?} */
    CountdownTimerService.prototype.getTimerValue;
    /** @type {?} */
    CountdownTimerService.prototype.setTimervalue;
}
//# sourceMappingURL=data:application/json;base64,