import { CommonModule } from '@angular/common';
import { Injectable, Component, NgModule, Input, EventEmitter, defineInjectable } from '@angular/core';
import { Observable, interval } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CountupTimerService = /** @class */ (function () {
    function CountupTimerService() {
        var _this = this;
        //Init
        this.timerValue = {
            seconds: '00',
            mins: '00',
            hours: '00',
        };
        this.isTimerStart = false;
        this.totalSeconds = 0;
        this.currentOperationId = 0;
        //start timer
        this.startTimer = (/**
         * @param {?=} startTime
         * @return {?}
         */
        function (startTime) {
            if (startTime) {
                /** @type {?} */
                var currentDate = new Date();
                /** @type {?} */
                var startedTime = new Date(startTime);
                _this.totalSeconds = Math.round((currentDate.getTime() - startedTime.getTime()) / 1000);
            }
            _this.isTimerStart = true;
            return true;
        });
        //end timer
        this.pauseTimer = (/**
         * @param {?=} startTime
         * @param {?=} endTime
         * @return {?}
         */
        function (startTime, endTime) {
            if (startTime && endTime) {
                /** @type {?} */
                var endedDate = new Date(endTime);
                /** @type {?} */
                var startedTime = new Date(startTime);
                _this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);
            }
            _this.isTimerStart = false;
            return false;
        });
        //reset Timer
        this.stopTimer = (/**
         * @return {?}
         */
        function () {
            _this.isTimerStart = false;
            _this.totalSeconds = 0;
        });
        //get timer value Obj
        this.getTimerValue = (/**
         * @return {?}
         */
        function () {
            return new Observable((/**
             * @param {?} obs
             * @return {?}
             */
            function (obs) {
                if (_this.intervalSubscription) {
                    _this.intervalSubscription.unsubscribe();
                }
                _this.intervalSubscription = _this.interval.subscribe((/**
                 * @param {?} int
                 * @return {?}
                 */
                function (int) {
                    if (_this.isTimerStart) {
                        ++_this.totalSeconds;
                        _this.timerValue.seconds = _this.setTimervalue(_this.totalSeconds % 60);
                        /** @type {?} */
                        var totalSecondsForMinutes = 0;
                        totalSecondsForMinutes = (Math.trunc(_this.totalSeconds / 60) >= 60) ? (_this.totalSeconds / 60) % 60 : _this.totalSeconds / 60;
                        _this.timerValue.mins = _this.setTimervalue(Math.trunc(totalSecondsForMinutes));
                        _this.timerValue.hours = _this.setTimervalue(Math.trunc(_this.totalSeconds / 3600));
                        obs.next(_this.timerValue);
                        obs.complete();
                    }
                    else {
                        if (_this.totalSeconds > 0) {
                            _this.timerValue.seconds = _this.setTimervalue(_this.totalSeconds % 60);
                            /** @type {?} */
                            var totalSecondsForMinutes = 0;
                            totalSecondsForMinutes = (Math.trunc(_this.totalSeconds / 60) >= 60) ? (_this.totalSeconds / 60) % 60 : _this.totalSeconds / 60;
                            _this.timerValue.mins = _this.setTimervalue(Math.trunc(totalSecondsForMinutes));
                            _this.timerValue.hours = _this.setTimervalue(Math.trunc(_this.totalSeconds / 3600));
                        }
                        else {
                            _this.timerValue.hours = "00";
                            _this.timerValue.mins = "00";
                            _this.timerValue.seconds = "00";
                        }
                        obs.next(_this.timerValue);
                        obs.complete();
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    obs.error(error);
                    obs.complete();
                }));
            }));
        });
        //set timer value
        this.setTimervalue = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            /** @type {?} */
            var valString = val + "";
            return (valString.length < 2) ? "0" + valString : valString;
        });
        this.interval = interval(1000);
    }
    CountupTimerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CountupTimerService.ctorParameters = function () { return []; };
    /** @nocollapse */ CountupTimerService.ngInjectableDef = defineInjectable({ factory: function CountupTimerService_Factory() { return new CountupTimerService(); }, token: CountupTimerService, providedIn: "root" });
    return CountupTimerService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var countUpTimerConfigModel = /** @class */ (function () {
    function countUpTimerConfigModel() {
    }
    return countUpTimerConfigModel;
}());
var timerTexts = /** @class */ (function () {
    function timerTexts() {
    }
    return timerTexts;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CountupTimerComponent = /** @class */ (function () {
    function CountupTimerComponent(countupTimerService) {
        var _this = this;
        this.countupTimerService = countupTimerService;
        //Init
        this.timerObj = {};
        //get timer value
        this.getTimerValue = (/**
         * @return {?}
         */
        function () {
            _this.timerSubscription = _this.countupTimerService.getTimerValue().subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                _this.timerObj = Object.assign(res);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                console.log(error);
                console.log('Failed to get timer value');
            }));
        });
    }
    /**
     * @return {?}
     */
    CountupTimerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getTimerValue();
        this.timerConfig = new countUpTimerConfigModel();
        this.timerTextConfig = new timerTexts();
        this.timerConfig = this.countUpTimerConfig ? Object.assign(this.countUpTimerConfig) : null;
        this.timerTextConfig = this.countUpTimerConfig && this.countUpTimerConfig.timerTexts ? Object.assign(this.countUpTimerConfig.timerTexts) : null;
    };
    /**
     * @return {?}
     */
    CountupTimerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.timerSubscription.unsubscribe();
    };
    CountupTimerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'countup-timer',
                    template: "<div [class]=\"timerConfig?.timerClass ? timerConfig.timerClass : ''\">\n  <span>{{timerObj.hours}}</span><span class=\"time-category\">{{timerTextConfig && timerTextConfig.hourText ? timerTextConfig.hourText : 'hh'}} </span> \n  <span>{{timerObj.mins}}</span><span class=\"time-category\">{{timerTextConfig && timerTextConfig.minuteText ? timerTextConfig.minuteText : 'mm'}}  </span> \n  <span>{{timerObj.seconds}}</span><span class=\"time-category\">{{timerTextConfig && timerTextConfig.secondsText ? timerTextConfig.secondsText : 'ss'}}</span>\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CountupTimerComponent.ctorParameters = function () { return [
        { type: CountupTimerService }
    ]; };
    CountupTimerComponent.propDecorators = {
        startTime: [{ type: Input }],
        countUpTimerConfig: [{ type: Input }]
    };
    return CountupTimerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var countDownTimerConfigModel = /** @class */ (function () {
    function countDownTimerConfigModel() {
    }
    return countDownTimerConfigModel;
}());
var countDownTimerTexts = /** @class */ (function () {
    function countDownTimerTexts() {
    }
    return countDownTimerTexts;
}());
/** @enum {string} */
var TimerStaus = {
    START: "START",
    PAUSE: "PAUSE",
    STOP: "STOP",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CountdownTimerService = /** @class */ (function () {
    function CountdownTimerService() {
        var _this = this;
        this.onTimerStatusChange = new EventEmitter();
        //Init
        this.timerValue = {
            seconds: '00',
            mins: '00',
            hours: '00',
        };
        this.isTimerStart = false;
        this.totalSeconds = 0;
        this.currentOperationId = 0;
        //start timer
        this.startTimer = (/**
         * @param {?} startTime
         * @return {?}
         */
        function (startTime) {
            if (startTime) {
                /** @type {?} */
                var currentDate = new Date();
                /** @type {?} */
                var startedTime = new Date(startTime);
                _this.totalSeconds = (Math.round((currentDate.getTime() - startedTime.getTime()) / 1000)) * -1;
            }
            _this.isTimerStart = true;
            _this.onTimerStatusChange.emit(TimerStaus.START);
            return true;
        });
        //end timer
        this.pauseTimer = (/**
         * @param {?=} startTime
         * @param {?=} endTime
         * @return {?}
         */
        function (startTime, endTime) {
            if (startTime && endTime) {
                /** @type {?} */
                var endedDate = new Date(endTime);
                /** @type {?} */
                var startedTime = new Date(startTime);
                _this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);
            }
            _this.isTimerStart = false;
            _this.onTimerStatusChange.emit(TimerStaus.PAUSE);
            return false;
        });
        //reset Timer
        this.stopTimer = (/**
         * @return {?}
         */
        function () {
            _this.isTimerStart = false;
            _this.totalSeconds = 0;
            _this.onTimerStatusChange.emit(TimerStaus.STOP);
        });
        //resume Timer
        this.resumeTimer = (/**
         * @return {?}
         */
        function () {
            _this.isTimerStart = true;
        });
        //get timer value Obj
        this.getTimerValue = (/**
         * @return {?}
         */
        function () {
            return new Observable((/**
             * @param {?} obs
             * @return {?}
             */
            function (obs) {
                if (_this.intervalSubscription) {
                    _this.intervalSubscription.unsubscribe();
                }
                _this.intervalSubscription = _this.interval.subscribe((/**
                 * @param {?} int
                 * @return {?}
                 */
                function (int) {
                    if (_this.isTimerStart && _this.totalSeconds > 0) {
                        --_this.totalSeconds;
                        _this.timerValue.seconds = _this.setTimervalue(_this.totalSeconds % 60);
                        /** @type {?} */
                        var totalSecondsForMinutes = 0;
                        totalSecondsForMinutes = (Math.trunc(_this.totalSeconds / 60) >= 60) ? (_this.totalSeconds / 60) % 60 : _this.totalSeconds / 60;
                        _this.timerValue.mins = _this.setTimervalue(Math.trunc(totalSecondsForMinutes));
                        _this.timerValue.hours = _this.setTimervalue(Math.trunc(_this.totalSeconds / 3600));
                        obs.next(_this.timerValue);
                        obs.complete();
                    }
                    else {
                        if (_this.totalSeconds > 0) {
                            _this.timerValue.seconds = _this.setTimervalue(_this.totalSeconds % 60);
                            /** @type {?} */
                            var totalSecondsForMinutes = 0;
                            totalSecondsForMinutes = (Math.trunc(_this.totalSeconds / 60) >= 60) ? (_this.totalSeconds / 60) % 60 : _this.totalSeconds / 60;
                            _this.timerValue.mins = _this.setTimervalue(Math.trunc(totalSecondsForMinutes));
                            _this.timerValue.hours = _this.setTimervalue(Math.trunc(_this.totalSeconds / 3600));
                        }
                        else {
                            _this.timerValue.hours = "00";
                            _this.timerValue.mins = "00";
                            _this.timerValue.seconds = "00";
                            _this.stopTimer();
                        }
                        obs.next(_this.timerValue);
                        obs.complete();
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    obs.error(error);
                    obs.complete();
                }));
            }));
        });
        //set timer value
        this.setTimervalue = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            /** @type {?} */
            var valString = val + "";
            return (valString.length < 2) ? "0" + valString : valString;
        });
        this.interval = interval(1000);
    }
    CountdownTimerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CountdownTimerService.ctorParameters = function () { return []; };
    /** @nocollapse */ CountdownTimerService.ngInjectableDef = defineInjectable({ factory: function CountdownTimerService_Factory() { return new CountdownTimerService(); }, token: CountdownTimerService, providedIn: "root" });
    return CountdownTimerService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CountdownTimerComponent = /** @class */ (function () {
    function CountdownTimerComponent(countdownTimerService) {
        var _this = this;
        this.countdownTimerService = countdownTimerService;
        this.timerObj = {};
        //get timer value
        this.getTimerValue = (/**
         * @return {?}
         */
        function () {
            _this.timerSubscription = _this.countdownTimerService.getTimerValue().subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                _this.timerObj = Object.assign(res);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                console.log(error);
                console.log('Failed to get timer value');
            }));
        });
    }
    /**
     * @return {?}
     */
    CountdownTimerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getTimerValue();
        this.timerConfig = new countDownTimerConfigModel();
        this.timerTextConfig = new countDownTimerTexts();
        this.timerConfig = this.countDownTimerConfig ? Object.assign(this.countDownTimerConfig) : null;
        this.timerTextConfig = this.countDownTimerConfig && this.countDownTimerConfig.timerTexts ? Object.assign(this.countDownTimerConfig.timerTexts) : null;
    };
    /**
     * @return {?}
     */
    CountdownTimerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.timerSubscription.unsubscribe();
    };
    CountdownTimerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'countdown-timer',
                    template: "<div [class]=\"timerConfig?.timerClass ? timerConfig.timerClass : ''\">\r\n  <span>{{timerObj.hours}}</span><span class=\"time-category\">{{timerTextConfig && timerTextConfig.hourText ? timerTextConfig.hourText : 'hh'}} </span> \r\n  <span>{{timerObj.mins}}</span><span class=\"time-category\">{{timerTextConfig && timerTextConfig.minuteText ? timerTextConfig.minuteText : 'mm'}}  </span> \r\n  <span>{{timerObj.seconds}}</span><span class=\"time-category\">{{timerTextConfig && timerTextConfig.secondsText ? timerTextConfig.secondsText : 'ss'}}</span>\r\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CountdownTimerComponent.ctorParameters = function () { return [
        { type: CountdownTimerService }
    ]; };
    CountdownTimerComponent.propDecorators = {
        startTime: [{ type: Input }],
        countDownTimerConfig: [{ type: Input }]
    };
    return CountdownTimerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StopWatchService = /** @class */ (function () {
    function StopWatchService() {
        var _this = this;
        //Init
        this.timerValue = {
            miliseconds: '00',
            seconds: '00',
            mins: '00',
            hours: '00',
        };
        this.isTimerStart = false;
        this.totalSeconds = 0;
        this.currentOperationId = 0;
        //start timer
        this.startTimer = (/**
         * @return {?}
         */
        function () {
            debugger;
            _this.isTimerStart = true;
            return true;
        });
        //end timer
        this.pauseTimer = (/**
         * @param {?=} startTime
         * @param {?=} endTime
         * @return {?}
         */
        function (startTime, endTime) {
            if (startTime && endTime) {
                /** @type {?} */
                var endedDate = new Date(endTime);
                /** @type {?} */
                var startedTime = new Date(startTime);
                _this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);
            }
            _this.isTimerStart = false;
            return false;
        });
        //reset Timer
        this.stopTimer = (/**
         * @return {?}
         */
        function () {
            _this.isTimerStart = false;
            _this.totalSeconds = 0;
        });
        //resume Timer
        this.resumeTimer = (/**
         * @return {?}
         */
        function () {
            _this.isTimerStart = true;
        });
        //get timer value Obj
        this.getTimerValue = (/**
         * @return {?}
         */
        function () {
            return new Observable((/**
             * @param {?} obs
             * @return {?}
             */
            function (obs) {
                if (_this.intervalSubscription) {
                    _this.intervalSubscription.unsubscribe();
                }
                _this.intervalSubscription = _this.interval.subscribe((/**
                 * @param {?} int
                 * @return {?}
                 */
                function (int) {
                    if (_this.isTimerStart && _this.totalSeconds > 0) {
                        --_this.totalSeconds;
                        _this.timerValue.seconds = _this.setTimervalue(_this.totalSeconds % 60);
                        /** @type {?} */
                        var totalSecondsForMinutes = 0;
                        totalSecondsForMinutes = (Math.trunc(_this.totalSeconds / 60) >= 60) ? (_this.totalSeconds / 60) % 60 : _this.totalSeconds / 60;
                        _this.timerValue.mins = _this.setTimervalue(Math.trunc(totalSecondsForMinutes));
                        _this.timerValue.hours = _this.setTimervalue(Math.trunc(_this.totalSeconds / 3600));
                        obs.next(_this.timerValue);
                        obs.complete();
                    }
                    else {
                        if (_this.totalSeconds > 0) {
                            _this.timerValue.seconds = _this.setTimervalue(_this.totalSeconds % 60);
                            /** @type {?} */
                            var totalSecondsForMinutes = 0;
                            totalSecondsForMinutes = (Math.trunc(_this.totalSeconds / 60) >= 60) ? (_this.totalSeconds / 60) % 60 : _this.totalSeconds / 60;
                            _this.timerValue.mins = _this.setTimervalue(Math.trunc(totalSecondsForMinutes));
                            _this.timerValue.hours = _this.setTimervalue(Math.trunc(_this.totalSeconds / 3600));
                        }
                        else {
                            _this.timerValue.hours = "00";
                            _this.timerValue.mins = "00";
                            _this.timerValue.seconds = "00";
                        }
                        obs.next(_this.timerValue);
                        obs.complete();
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    obs.error(error);
                    obs.complete();
                }));
            }));
        });
        //set timer value
        this.setTimervalue = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            /** @type {?} */
            var valString = val + "";
            return (valString.length < 2) ? "0" + valString : valString;
        });
        this.interval = interval(10000);
    }
    StopWatchService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    StopWatchService.ctorParameters = function () { return []; };
    /** @nocollapse */ StopWatchService.ngInjectableDef = defineInjectable({ factory: function StopWatchService_Factory() { return new StopWatchService(); }, token: StopWatchService, providedIn: "root" });
    return StopWatchService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StopWatchComponent = /** @class */ (function () {
    // timerConfig: countDownTimerConfigModel;
    // timerTextConfig: countDownTimerTexts;
    function StopWatchComponent(countdownTimerService) {
        var _this = this;
        this.countdownTimerService = countdownTimerService;
        this.timerObj = {};
        //get timer value
        this.getTimerValue = (/**
         * @return {?}
         */
        function () {
            _this.timerSubscription = _this.countdownTimerService.getTimerValue().subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                _this.timerObj = Object.assign(res);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                console.log(error);
                console.log('Failed to get timer value');
            }));
        });
    }
    /**
     * @return {?}
     */
    StopWatchComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getTimerValue();
        // this.timerConfig = new countDownTimerConfigModel();
        // this.timerTextConfig = new countDownTimerTexts();
        // this.timerConfig = this.countDownTimerConfig ? Object.assign(this.countDownTimerConfig) : null;
        // this.timerTextConfig = this.countDownTimerConfig && this.countDownTimerConfig.timerTexts ? Object.assign(this.countDownTimerConfig.timerTexts) :  null;
    };
    /**
     * @return {?}
     */
    StopWatchComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.timerSubscription.unsubscribe();
    };
    StopWatchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'stop-watch',
                    template: "<!-- <div [class]=\"timerConfig?.timerClass ? timerConfig.timerClass : ''\">\n  <span>{{timerObj.hours}}</span><span class=\"time-category\">{{timerTextConfig && timerTextConfig.hourText ? timerTextConfig.hourText : 'hh'}} </span> \n  <span>{{timerObj.mins}}</span><span class=\"time-category\">{{timerTextConfig && timerTextConfig.minuteText ? timerTextConfig.minuteText : 'mm'}}  </span> \n  <span>{{timerObj.seconds}}</span><span class=\"time-category\">{{timerTextConfig && timerTextConfig.secondsText ? timerTextConfig.secondsText : 'ss'}}</span>\n  <span>{{timerObj.miliseconds}}</span><span class=\"time-category\">{{timerTextConfig && timerTextConfig.milisecondsText ? timerTextConfig.milisecondsText : 'ss'}}</span>\n</div> -->",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    StopWatchComponent.ctorParameters = function () { return [
        { type: StopWatchService }
    ]; };
    return StopWatchComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxTimerModule = /** @class */ (function () {
    function NgxTimerModule() {
    }
    NgxTimerModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        CountupTimerComponent,
                        CountdownTimerComponent,
                        StopWatchComponent
                    ],
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        CountupTimerComponent,
                        CountdownTimerComponent,
                        StopWatchComponent
                    ],
                    entryComponents: [
                        CountupTimerComponent,
                        CountdownTimerComponent,
                        StopWatchComponent
                    ],
                    providers: [
                        CountupTimerService,
                        CountdownTimerService,
                        StopWatchService
                    ]
                },] }
    ];
    return NgxTimerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxTimerModule, CountupTimerComponent, CountupTimerService, countUpTimerConfigModel, timerTexts, CountdownTimerComponent, CountdownTimerService, countDownTimerConfigModel, countDownTimerTexts, TimerStaus, StopWatchComponent as ɵa, StopWatchService as ɵb };

//# sourceMappingURL=ngx-timer.js.map