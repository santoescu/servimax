/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
import { Observable, interval } from 'rxjs';
import { TimerStaus } from './countdown-timer.model';
import * as i0 from "@angular/core";
var CountdownTimerService = /** @class */ (function () {
    function CountdownTimerService() {
        var _this = this;
        this.onTimerStatusChange = new EventEmitter();
        //Init
        this.timerValue = {
            seconds: '00',
            mins: '00',
            hours: '00',
        };
        this.isTimerStart = false;
        this.totalSeconds = 0;
        this.currentOperationId = 0;
        //start timer
        this.startTimer = (/**
         * @param {?} startTime
         * @return {?}
         */
        function (startTime) {
            if (startTime) {
                /** @type {?} */
                var currentDate = new Date();
                /** @type {?} */
                var startedTime = new Date(startTime);
                _this.totalSeconds = (Math.round((currentDate.getTime() - startedTime.getTime()) / 1000)) * -1;
            }
            _this.isTimerStart = true;
            _this.onTimerStatusChange.emit(TimerStaus.START);
            return true;
        });
        //end timer
        this.pauseTimer = (/**
         * @param {?=} startTime
         * @param {?=} endTime
         * @return {?}
         */
        function (startTime, endTime) {
            if (startTime && endTime) {
                /** @type {?} */
                var endedDate = new Date(endTime);
                /** @type {?} */
                var startedTime = new Date(startTime);
                _this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);
            }
            _this.isTimerStart = false;
            _this.onTimerStatusChange.emit(TimerStaus.PAUSE);
            return false;
        });
        //reset Timer
        this.stopTimer = (/**
         * @return {?}
         */
        function () {
            _this.isTimerStart = false;
            _this.totalSeconds = 0;
            _this.onTimerStatusChange.emit(TimerStaus.STOP);
        });
        //resume Timer
        this.resumeTimer = (/**
         * @return {?}
         */
        function () {
            _this.isTimerStart = true;
        });
        //get timer value Obj
        this.getTimerValue = (/**
         * @return {?}
         */
        function () {
            return new Observable((/**
             * @param {?} obs
             * @return {?}
             */
            function (obs) {
                if (_this.intervalSubscription) {
                    _this.intervalSubscription.unsubscribe();
                }
                _this.intervalSubscription = _this.interval.subscribe((/**
                 * @param {?} int
                 * @return {?}
                 */
                function (int) {
                    if (_this.isTimerStart && _this.totalSeconds > 0) {
                        --_this.totalSeconds;
                        _this.timerValue.seconds = _this.setTimervalue(_this.totalSeconds % 60);
                        /** @type {?} */
                        var totalSecondsForMinutes = 0;
                        totalSecondsForMinutes = (Math.trunc(_this.totalSeconds / 60) >= 60) ? (_this.totalSeconds / 60) % 60 : _this.totalSeconds / 60;
                        _this.timerValue.mins = _this.setTimervalue(Math.trunc(totalSecondsForMinutes));
                        _this.timerValue.hours = _this.setTimervalue(Math.trunc(_this.totalSeconds / 3600));
                        obs.next(_this.timerValue);
                        obs.complete();
                    }
                    else {
                        if (_this.totalSeconds > 0) {
                            _this.timerValue.seconds = _this.setTimervalue(_this.totalSeconds % 60);
                            /** @type {?} */
                            var totalSecondsForMinutes = 0;
                            totalSecondsForMinutes = (Math.trunc(_this.totalSeconds / 60) >= 60) ? (_this.totalSeconds / 60) % 60 : _this.totalSeconds / 60;
                            _this.timerValue.mins = _this.setTimervalue(Math.trunc(totalSecondsForMinutes));
                            _this.timerValue.hours = _this.setTimervalue(Math.trunc(_this.totalSeconds / 3600));
                        }
                        else {
                            _this.timerValue.hours = "00";
                            _this.timerValue.mins = "00";
                            _this.timerValue.seconds = "00";
                            _this.stopTimer();
                        }
                        obs.next(_this.timerValue);
                        obs.complete();
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    obs.error(error);
                    obs.complete();
                }));
            }));
        });
        //set timer value
        this.setTimervalue = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            /** @type {?} */
            var valString = val + "";
            return (valString.length < 2) ? "0" + valString : valString;
        });
        this.interval = interval(1000);
    }
    CountdownTimerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CountdownTimerService.ctorParameters = function () { return []; };
    /** @nocollapse */ CountdownTimerService.ngInjectableDef = i0.defineInjectable({ factory: function CountdownTimerService_Factory() { return new CountdownTimerService(); }, token: CountdownTimerService, providedIn: "root" });
    return CountdownTimerService;
}());
export { CountdownTimerService };
if (false) {
    /** @type {?} */
    CountdownTimerService.prototype.onTimerStatusChange;
    /** @type {?} */
    CountdownTimerService.prototype.timerValue;
    /** @type {?} */
    CountdownTimerService.prototype.isTimerStart;
    /** @type {?} */
    CountdownTimerService.prototype.interval;
    /** @type {?} */
    CountdownTimerService.prototype.intervalSubscription;
    /** @type {?} */
    CountdownTimerService.prototype.totalSeconds;
    /** @type {?} */
    CountdownTimerService.prototype.currentOperationId;
    /** @type {?} */
    CountdownTimerService.prototype.startTimer;
    /** @type {?} */
    CountdownTimerService.prototype.pauseTimer;
    /** @type {?} */
    CountdownTimerService.prototype.stopTimer;
    /** @type {?} */
    CountdownTimerService.prototype.resumeTimer;
    /** @type {?} */
    CountdownTimerService.prototype.getTimerValue;
    /** @type {?} */
    CountdownTimerService.prototype.setTimervalue;
}
//# sourceMappingURL=data:application/json;base64,