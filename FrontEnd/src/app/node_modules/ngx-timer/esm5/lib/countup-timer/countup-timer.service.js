/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable, interval } from 'rxjs';
import * as i0 from "@angular/core";
var CountupTimerService = /** @class */ (function () {
    function CountupTimerService() {
        var _this = this;
        //Init
        this.timerValue = {
            seconds: '00',
            mins: '00',
            hours: '00',
        };
        this.isTimerStart = false;
        this.totalSeconds = 0;
        this.currentOperationId = 0;
        //start timer
        this.startTimer = (/**
         * @param {?=} startTime
         * @return {?}
         */
        function (startTime) {
            if (startTime) {
                /** @type {?} */
                var currentDate = new Date();
                /** @type {?} */
                var startedTime = new Date(startTime);
                _this.totalSeconds = Math.round((currentDate.getTime() - startedTime.getTime()) / 1000);
            }
            _this.isTimerStart = true;
            return true;
        });
        //end timer
        this.pauseTimer = (/**
         * @param {?=} startTime
         * @param {?=} endTime
         * @return {?}
         */
        function (startTime, endTime) {
            if (startTime && endTime) {
                /** @type {?} */
                var endedDate = new Date(endTime);
                /** @type {?} */
                var startedTime = new Date(startTime);
                _this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);
            }
            _this.isTimerStart = false;
            return false;
        });
        //reset Timer
        this.stopTimer = (/**
         * @return {?}
         */
        function () {
            _this.isTimerStart = false;
            _this.totalSeconds = 0;
        });
        //get timer value Obj
        this.getTimerValue = (/**
         * @return {?}
         */
        function () {
            return new Observable((/**
             * @param {?} obs
             * @return {?}
             */
            function (obs) {
                if (_this.intervalSubscription) {
                    _this.intervalSubscription.unsubscribe();
                }
                _this.intervalSubscription = _this.interval.subscribe((/**
                 * @param {?} int
                 * @return {?}
                 */
                function (int) {
                    if (_this.isTimerStart) {
                        ++_this.totalSeconds;
                        _this.timerValue.seconds = _this.setTimervalue(_this.totalSeconds % 60);
                        /** @type {?} */
                        var totalSecondsForMinutes = 0;
                        totalSecondsForMinutes = (Math.trunc(_this.totalSeconds / 60) >= 60) ? (_this.totalSeconds / 60) % 60 : _this.totalSeconds / 60;
                        _this.timerValue.mins = _this.setTimervalue(Math.trunc(totalSecondsForMinutes));
                        _this.timerValue.hours = _this.setTimervalue(Math.trunc(_this.totalSeconds / 3600));
                        obs.next(_this.timerValue);
                        obs.complete();
                    }
                    else {
                        if (_this.totalSeconds > 0) {
                            _this.timerValue.seconds = _this.setTimervalue(_this.totalSeconds % 60);
                            /** @type {?} */
                            var totalSecondsForMinutes = 0;
                            totalSecondsForMinutes = (Math.trunc(_this.totalSeconds / 60) >= 60) ? (_this.totalSeconds / 60) % 60 : _this.totalSeconds / 60;
                            _this.timerValue.mins = _this.setTimervalue(Math.trunc(totalSecondsForMinutes));
                            _this.timerValue.hours = _this.setTimervalue(Math.trunc(_this.totalSeconds / 3600));
                        }
                        else {
                            _this.timerValue.hours = "00";
                            _this.timerValue.mins = "00";
                            _this.timerValue.seconds = "00";
                        }
                        obs.next(_this.timerValue);
                        obs.complete();
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    obs.error(error);
                    obs.complete();
                }));
            }));
        });
        //set timer value
        this.setTimervalue = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            /** @type {?} */
            var valString = val + "";
            return (valString.length < 2) ? "0" + valString : valString;
        });
        this.interval = interval(1000);
    }
    CountupTimerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CountupTimerService.ctorParameters = function () { return []; };
    /** @nocollapse */ CountupTimerService.ngInjectableDef = i0.defineInjectable({ factory: function CountupTimerService_Factory() { return new CountupTimerService(); }, token: CountupTimerService, providedIn: "root" });
    return CountupTimerService;
}());
export { CountupTimerService };
if (false) {
    /** @type {?} */
    CountupTimerService.prototype.timerValue;
    /** @type {?} */
    CountupTimerService.prototype.isTimerStart;
    /** @type {?} */
    CountupTimerService.prototype.interval;
    /** @type {?} */
    CountupTimerService.prototype.intervalSubscription;
    /** @type {?} */
    CountupTimerService.prototype.totalSeconds;
    /** @type {?} */
    CountupTimerService.prototype.currentOperationId;
    /** @type {?} */
    CountupTimerService.prototype.startTimer;
    /** @type {?} */
    CountupTimerService.prototype.pauseTimer;
    /** @type {?} */
    CountupTimerService.prototype.stopTimer;
    /** @type {?} */
    CountupTimerService.prototype.getTimerValue;
    /** @type {?} */
    CountupTimerService.prototype.setTimervalue;
}
//# sourceMappingURL=data:application/json;base64,