/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable, interval } from 'rxjs';
import * as i0 from "@angular/core";
var StopWatchService = /** @class */ (function () {
    function StopWatchService() {
        var _this = this;
        //Init
        this.timerValue = {
            miliseconds: '00',
            seconds: '00',
            mins: '00',
            hours: '00',
        };
        this.isTimerStart = false;
        this.totalSeconds = 0;
        this.currentOperationId = 0;
        //start timer
        this.startTimer = (/**
         * @return {?}
         */
        function () {
            debugger;
            _this.isTimerStart = true;
            return true;
        });
        //end timer
        this.pauseTimer = (/**
         * @param {?=} startTime
         * @param {?=} endTime
         * @return {?}
         */
        function (startTime, endTime) {
            if (startTime && endTime) {
                /** @type {?} */
                var endedDate = new Date(endTime);
                /** @type {?} */
                var startedTime = new Date(startTime);
                _this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);
            }
            _this.isTimerStart = false;
            return false;
        });
        //reset Timer
        this.stopTimer = (/**
         * @return {?}
         */
        function () {
            _this.isTimerStart = false;
            _this.totalSeconds = 0;
        });
        //resume Timer
        this.resumeTimer = (/**
         * @return {?}
         */
        function () {
            _this.isTimerStart = true;
        });
        //get timer value Obj
        this.getTimerValue = (/**
         * @return {?}
         */
        function () {
            return new Observable((/**
             * @param {?} obs
             * @return {?}
             */
            function (obs) {
                if (_this.intervalSubscription) {
                    _this.intervalSubscription.unsubscribe();
                }
                _this.intervalSubscription = _this.interval.subscribe((/**
                 * @param {?} int
                 * @return {?}
                 */
                function (int) {
                    if (_this.isTimerStart && _this.totalSeconds > 0) {
                        --_this.totalSeconds;
                        _this.timerValue.seconds = _this.setTimervalue(_this.totalSeconds % 60);
                        /** @type {?} */
                        var totalSecondsForMinutes = 0;
                        totalSecondsForMinutes = (Math.trunc(_this.totalSeconds / 60) >= 60) ? (_this.totalSeconds / 60) % 60 : _this.totalSeconds / 60;
                        _this.timerValue.mins = _this.setTimervalue(Math.trunc(totalSecondsForMinutes));
                        _this.timerValue.hours = _this.setTimervalue(Math.trunc(_this.totalSeconds / 3600));
                        obs.next(_this.timerValue);
                        obs.complete();
                    }
                    else {
                        if (_this.totalSeconds > 0) {
                            _this.timerValue.seconds = _this.setTimervalue(_this.totalSeconds % 60);
                            /** @type {?} */
                            var totalSecondsForMinutes = 0;
                            totalSecondsForMinutes = (Math.trunc(_this.totalSeconds / 60) >= 60) ? (_this.totalSeconds / 60) % 60 : _this.totalSeconds / 60;
                            _this.timerValue.mins = _this.setTimervalue(Math.trunc(totalSecondsForMinutes));
                            _this.timerValue.hours = _this.setTimervalue(Math.trunc(_this.totalSeconds / 3600));
                        }
                        else {
                            _this.timerValue.hours = "00";
                            _this.timerValue.mins = "00";
                            _this.timerValue.seconds = "00";
                        }
                        obs.next(_this.timerValue);
                        obs.complete();
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    obs.error(error);
                    obs.complete();
                }));
            }));
        });
        //set timer value
        this.setTimervalue = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            /** @type {?} */
            var valString = val + "";
            return (valString.length < 2) ? "0" + valString : valString;
        });
        this.interval = interval(10000);
    }
    StopWatchService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    StopWatchService.ctorParameters = function () { return []; };
    /** @nocollapse */ StopWatchService.ngInjectableDef = i0.defineInjectable({ factory: function StopWatchService_Factory() { return new StopWatchService(); }, token: StopWatchService, providedIn: "root" });
    return StopWatchService;
}());
export { StopWatchService };
if (false) {
    /** @type {?} */
    StopWatchService.prototype.timerValue;
    /** @type {?} */
    StopWatchService.prototype.isTimerStart;
    /** @type {?} */
    StopWatchService.prototype.interval;
    /** @type {?} */
    StopWatchService.prototype.intervalSubscription;
    /** @type {?} */
    StopWatchService.prototype.totalSeconds;
    /** @type {?} */
    StopWatchService.prototype.currentOperationId;
    /** @type {?} */
    StopWatchService.prototype.startTimer;
    /** @type {?} */
    StopWatchService.prototype.pauseTimer;
    /** @type {?} */
    StopWatchService.prototype.stopTimer;
    /** @type {?} */
    StopWatchService.prototype.resumeTimer;
    /** @type {?} */
    StopWatchService.prototype.getTimerValue;
    /** @type {?} */
    StopWatchService.prototype.setTimervalue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcC13YXRjaC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXRpbWVyLyIsInNvdXJjZXMiOlsibGliL3N0b3Atd2F0Y2gvc3RvcC13YXRjaC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUU1QztJQWtCRTtRQUFBLGlCQUVDOztRQWRNLGVBQVUsR0FBRztZQUNsQixXQUFXLEVBQUUsSUFBSTtZQUNqQixPQUFPLEVBQUUsSUFBSTtZQUNiLElBQUksRUFBRSxJQUFJO1lBQ1YsS0FBSyxFQUFFLElBQUk7U0FDWixDQUFBO1FBQ00saUJBQVksR0FBWSxLQUFLLENBQUM7UUFHOUIsaUJBQVksR0FBVyxDQUFDLENBQUM7UUFDekIsdUJBQWtCLEdBQVcsQ0FBQyxDQUFDOztRQU90QyxlQUFVOzs7UUFBRztZQUNYLFFBQVEsQ0FBQztZQUNULEtBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQ3pCLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxFQUFBOztRQUdELGVBQVU7Ozs7O1FBQUcsVUFBQyxTQUFlLEVBQUUsT0FBYTtZQUMxQyxJQUFJLFNBQVMsSUFBSSxPQUFPLEVBQUU7O29CQUNwQixTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDOztvQkFDN0IsV0FBVyxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDckMsS0FBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO2FBQ3RGO1lBQ0QsS0FBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7WUFDMUIsT0FBTyxLQUFLLENB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QkFDNUIsS0FBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO3lCQUNoQzt3QkFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzt3QkFDMUIsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO3FCQUNoQjtnQkFDSCxDQUFDOzs7O2dCQUFFLFVBQUEsS0FBSztvQkFDTixHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNqQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ2pCLENBQUMsRUFBQyxDQUFDO1lBQ0wsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUE7O1FBR0Qsa0JBQWE7Ozs7UUFBRyxVQUFDLEdBQUc7O2dCQUNkLFNBQVMsR0FBRyxHQUFHLEdBQUcsRUFBRTtZQUN4QixPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQzlELENBQUMsRUFBQTtRQTFFQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDOztnQkFwQkYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7Ozs7MkJBTEQ7Q0FpR0MsQUE5RkQsSUE4RkM7U0EzRlksZ0JBQWdCOzs7SUFHM0Isc0NBS0M7O0lBQ0Qsd0NBQXFDOztJQUNyQyxvQ0FBaUM7O0lBQ2pDLGdEQUE0Qjs7SUFDNUIsd0NBQWdDOztJQUNoQyw4Q0FBc0M7O0lBT3RDLHNDQUlDOztJQUdELHNDQVFDOztJQUdELHFDQUdDOztJQUdELHVDQUVDOztJQUdELHlDQW1DQzs7SUFHRCx5Q0FHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGludGVydmFsIH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFN0b3BXYXRjaFNlcnZpY2Uge1xuXG4gIC8vSW5pdFxuICBwdWJsaWMgdGltZXJWYWx1ZSA9IHtcbiAgICBtaWxpc2Vjb25kczogJzAwJyxcbiAgICBzZWNvbmRzOiAnMDAnLFxuICAgIG1pbnM6ICcwMCcsXG4gICAgaG91cnM6ICcwMCcsXG4gIH1cbiAgcHVibGljIGlzVGltZXJTdGFydDogYm9vbGVhbiA9IGZhbHNlO1xuICBwdWJsaWMgaW50ZXJ2YWw6IE9ic2VydmFibGU8YW55PjtcbiAgcHVibGljIGludGVydmFsU3Vic2NyaXB0aW9uO1xuICBwdWJsaWMgdG90YWxTZWNvbmRzOiBudW1iZXIgPSAwO1xuICBwdWJsaWMgY3VycmVudE9wZXJhdGlvbklkOiBudW1iZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaW50ZXJ2YWwgPSBpbnRlcnZhbCgxMDAwMCk7XG4gIH1cblxuICAvL3N0YXJ0IHRpbWVyXG4gIHN0YXJ0VGltZXIgPSAoKSA9PiB7XG4gICAgZGVidWdnZXI7XG4gICAgdGhpcy5pc1RpbWVyU3RhcnQgPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy9lbmQgdGltZXJcbiAgcGF1c2VUaW1lciA9IChzdGFydFRpbWU/OiBhbnksIGVuZFRpbWU/OiBhbnkpID0+IHtcbiAgICBpZiAoc3RhcnRUaW1lICYmIGVuZFRpbWUpIHtcbiAgICAgIGxldCBlbmRlZERhdGUgPSBuZXcgRGF0ZShlbmRUaW1lKTtcbiAgICAgIGxldCBzdGFydGVkVGltZSA9IG5ldyBEYXRlKHN0YXJ0VGltZSk7XG4gICAgICB0aGlzLnRvdGFsU2Vjb25kcyA9IE1hdGgucm91bmQoKGVuZGVkRGF0ZS5nZXRUaW1lKCkgLSBzdGFydGVkVGltZS5nZXRUaW1lKCkpIC8gMTAwMCk7XG4gICAgfVxuICAgIHRoaXMuaXNUaW1lclN0YXJ0ID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy9yZXNldCBUaW1lclxuICBzdG9wVGltZXIgPSAoKSA9PiB7XG4gICAgdGhpcy5pc1RpbWVyU3RhcnQgPSBmYWxzZTtcbiAgICB0aGlzLnRvdGFsU2Vjb25kcyA9IDA7XG4gIH1cblxuICAvL3Jlc3VtZSBUaW1lclxuICByZXN1bWVUaW1lciA9ICgpID0+IHtcbiAgICB0aGlzLmlzVGltZXJTdGFydCA9IHRydWU7XG4gIH1cblxuICAvL2dldCB0aW1lciB2YWx1ZSBPYmpcbiAgZ2V0VGltZXJWYWx1ZSA9ICgpOiBPYnNlcnZhYmxlPGFueT4gPT4ge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShvYnMgPT4ge1xuICAgICAgaWYgKHRoaXMuaW50ZXJ2YWxTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5pbnRlcnZhbFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5pbnRlcnZhbFN1YnNjcmlwdGlvbiA9IHRoaXMuaW50ZXJ2YWwuc3Vic2NyaWJlKGludCA9PiB7XG4gICAgICAgIGlmICh0aGlzLmlzVGltZXJTdGFydCAmJiB0aGlzLnRvdGFsU2Vjb25kcyA+IDApIHtcbiAgICAgICAgICAtLXRoaXMudG90YWxTZWNvbmRzO1xuICAgICAgICAgIHRoaXMudGltZXJWYWx1ZS5zZWNvbmRzID0gdGhpcy5zZXRUaW1lcnZhbHVlKHRoaXMudG90YWxTZWNvbmRzICUgNjApO1xuICAgICAgICAgIGxldCB0b3RhbFNlY29uZHNGb3JNaW51dGVzID0gMDtcbiAgICAgICAgICB0b3RhbFNlY29uZHNGb3JNaW51dGVzID0gKE1hdGgudHJ1bmModGhpcy50b3RhbFNlY29uZHMgLyA2MCkgPj0gNjApID8gKHRoaXMudG90YWxTZWNvbmRzIC8gNjApICUgNjAgOiB0aGlzLnRvdGFsU2Vjb25kcyAvIDYwO1xuICAgICAgICAgIHRoaXMudGltZXJWYWx1ZS5taW5zID0gdGhpcy5zZXRUaW1lcnZhbHVlKE1hdGgudHJ1bmModG90YWxTZWNvbmRzRm9yTWludXRlcykpO1xuICAgICAgICAgIHRoaXMudGltZXJWYWx1ZS5ob3VycyA9IHRoaXMuc2V0VGltZXJ2YWx1ZShNYXRoLnRydW5jKHRoaXMudG90YWxTZWNvbmRzIC8gMzYwMCkpO1xuICAgICAgICAgIG9icy5uZXh0KHRoaXMudGltZXJWYWx1ZSk7XG4gICAgICAgICAgb2JzLmNvbXBsZXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMudG90YWxTZWNvbmRzID4gMCkge1xuICAgICAgICAgICAgdGhpcy50aW1lclZhbHVlLnNlY29uZHMgPSB0aGlzLnNldFRpbWVydmFsdWUodGhpcy50b3RhbFNlY29uZHMgJSA2MCk7XG4gICAgICAgICAgICBsZXQgdG90YWxTZWNvbmRzRm9yTWludXRlcyA9IDA7XG4gICAgICAgICAgICB0b3RhbFNlY29uZHNGb3JNaW51dGVzID0gKE1hdGgudHJ1bmModGhpcy50b3RhbFNlY29uZHMgLyA2MCkgPj0gNjApID8gKHRoaXMudG90YWxTZWNvbmRzIC8gNjApICUgNjAgOiB0aGlzLnRvdGFsU2Vjb25kcyAvIDYwO1xuICAgICAgICAgICAgdGhpcy50aW1lclZhbHVlLm1pbnMgPSB0aGlzLnNldFRpbWVydmFsdWUoTWF0aC50cnVuYyh0b3RhbFNlY29uZHNGb3JNaW51dGVzKSk7XG4gICAgICAgICAgICB0aGlzLnRpbWVyVmFsdWUuaG91cnMgPSB0aGlzLnNldFRpbWVydmFsdWUoTWF0aC50cnVuYyh0aGlzLnRvdGFsU2Vjb25kcyAvIDM2MDApKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50aW1lclZhbHVlLmhvdXJzID0gXCIwMFwiO1xuICAgICAgICAgICAgdGhpcy50aW1lclZhbHVlLm1pbnMgPSBcIjAwXCI7XG4gICAgICAgICAgICB0aGlzLnRpbWVyVmFsdWUuc2Vjb25kcyA9IFwiMDBcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JzLm5leHQodGhpcy50aW1lclZhbHVlKTtcbiAgICAgICAgICBvYnMuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICBvYnMuZXJyb3IoZXJyb3IpO1xuICAgICAgICBvYnMuY29tcGxldGUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLy9zZXQgdGltZXIgdmFsdWVcbiAgc2V0VGltZXJ2YWx1ZSA9ICh2YWwpID0+IHtcbiAgICBsZXQgdmFsU3RyaW5nID0gdmFsICsgXCJcIjtcbiAgICByZXR1cm4gKHZhbFN0cmluZy5sZW5ndGggPCAyKSA/IFwiMFwiICsgdmFsU3RyaW5nIDogdmFsU3RyaW5nO1xuICB9XG59XG4iXX0=