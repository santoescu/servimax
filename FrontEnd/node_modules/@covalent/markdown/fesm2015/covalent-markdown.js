import { CommonModule } from '@angular/common';
import { DomSanitizer } from '@angular/platform-browser';
import { __awaiter } from 'tslib';
import { Component, ElementRef, Input, Output, EventEmitter, Renderer2, SecurityContext, HostBinding, NgModule, Injectable, Sanitizer, defineInjectable, inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @param {?} str
 * @return {?}
 */
function removeLeadingHash(str) {
    if (str) {
        return str.replace(/^#+/, '');
    }
    return undefined;
}
/**
 * @param {?} str
 * @return {?}
 */
function removeTrailingHash(str) {
    if (str) {
        return str.replace(/\#.*/, '');
    }
    return undefined;
}
/**
 * @param {?} str
 * @return {?}
 */
function normalizeAnchor(str) {
    if (str) {
        return removeLeadingHash(str.replace(/(_|-|\s)+/g, '')).toLowerCase();
    }
    return undefined;
}
/**
 * @param {?} element
 * @param {?} anchor
 * @return {?}
 */
function scrollToAnchor(element, anchor) {
    if (element && anchor) {
        /** @type {?} */
        const normalizedAnchor = normalizeAnchor(anchor);
        /** @type {?} */
        const parent = element.parentElement;
        /** @type {?} */
        let headingToJumpTo;
        /** @type {?} */
        const headingWithinComponent = element.querySelector(`[id="${normalizedAnchor}"]`);
        if (headingWithinComponent) {
            headingToJumpTo = headingWithinComponent;
        }
        else if (parent) {
            headingToJumpTo = parent.querySelector(`[id="${normalizedAnchor}"]`);
        }
        if (headingToJumpTo) {
            headingToJumpTo.scrollIntoView({ behavior: 'auto' });
        }
        else {
            // TODO: leave this warning?
            // tslint:disable-next-line
            console.warn(`Could not jump to heading '${anchor}'`);
        }
    }
}
/**
 * @param {?} anchor
 * @return {?}
 */
function isAnchorLink(anchor) {
    if (anchor) {
        return anchor.getAttribute('href').startsWith('#');
    }
}
/**
 * @param {?} githubHref
 * @return {?}
 */
function rawGithubHref(githubHref) {
    if (githubHref) {
        /** @type {?} */
        const url = new URL(githubHref);
        if (url.pathname.startsWith('/raw/')) {
            return githubHref;
        }
        else {
            url.hostname = 'raw.githubusercontent.com';
            url.pathname = url.pathname.split('/blob', 2).join('');
            return url.href;
        }
    }
    return undefined;
}
/**
 * @param {?} href
 * @return {?}
 */
function isGithubHref(href) {
    try {
        /** @type {?} */
        const temp = new URL(href);
        return temp.hostname === 'github.com';
    }
    catch (_a) {
        return false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/* tslint:disable-next-line */
/** @type {?} */
let showdown = require('showdown/dist/showdown.js');
// TODO: assumes it is a github url
// allow override somehow
/**
 * @param {?} currentHref
 * @param {?} relativeHref
 * @return {?}
 */
function generateAbsoluteHref(currentHref, relativeHref) {
    if (currentHref && relativeHref) {
        /** @type {?} */
        const currentUrl = new URL(currentHref);
        /** @type {?} */
        const path = currentUrl.pathname
            .split('/')
            .slice(1, -1)
            .join('/');
        /** @type {?} */
        const correctUrl = new URL(currentHref);
        if (relativeHref.startsWith('/')) {
            // url is relative to top level
            /** @type {?} */
            const orgAndRepo = path
                .split('/')
                .slice(0, 3)
                .join('/');
            correctUrl.pathname = `${orgAndRepo}${relativeHref}`;
        }
        else {
            correctUrl.pathname = `${path}/${relativeHref}`;
        }
        return correctUrl.href;
    }
    return undefined;
}
/**
 * @param {?} html
 * @param {?} currentHref
 * @return {?}
 */
function normalizeHtmlHrefs(html, currentHref) {
    if (currentHref) {
        /** @type {?} */
        const document = new DOMParser().parseFromString(html, 'text/html');
        document.querySelectorAll('a[href]').forEach((link) => {
            /** @type {?} */
            const url = new URL(link.href);
            /** @type {?} */
            const originalHash = url.hash;
            if (isAnchorLink(link)) {
                if (originalHash) {
                    url.hash = normalizeAnchor(originalHash);
                    link.href = url.hash;
                }
            }
            else if (url.host === window.location.host) {
                // hosts match, meaning URL MIGHT have been malformed by showdown
                // url is a relative url or just a link to a part of the application
                if (url.pathname.endsWith('.md')) {
                    // only check .md urls
                    /** @type {?} */
                    const hrefWithoutHash = removeTrailingHash(link.getAttribute('href'));
                    url.href = generateAbsoluteHref(currentHref, hrefWithoutHash);
                    if (originalHash) {
                        url.hash = normalizeAnchor(originalHash);
                    }
                    link.href = url.href;
                }
                link.target = '_blank';
            }
            else {
                // url is absolute
                if (url.pathname.endsWith('.md')) {
                    if (originalHash) {
                        url.hash = normalizeAnchor(originalHash);
                    }
                    link.href = url.href;
                }
                link.target = '_blank';
            }
        });
        return new XMLSerializer().serializeToString(document);
    }
    return html;
}
/**
 * @param {?} html
 * @param {?} currentHref
 * @return {?}
 */
function normalizeImageSrcs(html, currentHref) {
    if (currentHref) {
        /** @type {?} */
        const document = new DOMParser().parseFromString(html, 'text/html');
        document.querySelectorAll('img[src]').forEach((image) => {
            /** @type {?} */
            const src = image.getAttribute('src');
            try {
                /* tslint:disable-next-line:no-unused-expression */
                new URL(src);
                if (isGithubHref(src)) {
                    image.src = rawGithubHref(src);
                }
            }
            catch (_a) {
                image.src = generateAbsoluteHref(isGithubHref(currentHref) ? rawGithubHref(currentHref) : currentHref, src);
            }
        });
        return new XMLSerializer().serializeToString(document);
    }
    return html;
}
/**
 * @param {?} html
 * @return {?}
 */
function addIdsToHeadings(html) {
    if (html) {
        /** @type {?} */
        const document = new DOMParser().parseFromString(html, 'text/html');
        document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach((heading) => {
            /** @type {?} */
            const id = normalizeAnchor(heading.innerHTML);
            heading.setAttribute('id', id);
        });
        return new XMLSerializer().serializeToString(document);
    }
    return html;
}
class TdMarkdownComponent {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     * @param {?} _domSanitizer
     */
    constructor(_renderer, _elementRef, _domSanitizer) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._domSanitizer = _domSanitizer;
        this._simpleLineBreaks = false;
        this._viewInit = false;
        /**
         * .td-markdown class added to host so ::ng-deep gets scoped.
         */
        this.class = 'td-markdown';
        /**
         * contentReady?: function
         * Event emitted after the markdown content rendering is finished.
         */
        this.onContentReady = new EventEmitter();
    }
    /**
     * content?: string
     *
     * Markdown format content to be parsed as html markup.
     *
     * e.g. README.md content.
     * @param {?} content
     * @return {?}
     */
    set content(content) {
        this._content = content;
    }
    /**
     * simpleLineBreaks?: string
     *
     * Sets whether newline characters inside paragraphs and spans are parsed as <br/>.
     * Defaults to false.
     * @param {?} simpleLineBreaks
     * @return {?}
     */
    set simpleLineBreaks(simpleLineBreaks) {
        this._simpleLineBreaks = simpleLineBreaks;
    }
    /**
     * hostedUrl?: string
     *
     * If markdown contains relative paths, this is required to generate correct urls.
     *
     * @param {?} hostedUrl
     * @return {?}
     */
    set hostedUrl(hostedUrl) {
        this._hostedUrl = hostedUrl;
    }
    /**
     * anchor?: string
     *
     * Anchor to jump to.
     *
     * @param {?} anchor
     * @return {?}
     */
    set anchor(anchor) {
        this._anchor = anchor;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // only anchor changed
        if (changes.anchor && !changes.content && !changes.simpleLineBreaks && !changes.hostedUrl) {
            scrollToAnchor(this._elementRef.nativeElement, this._anchor);
        }
        else {
            this.refresh();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this._content) {
            this._loadContent(((/** @type {?} */ (this._elementRef.nativeElement))).textContent);
        }
        this._viewInit = true;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeAnchorListeners();
    }
    /**
     * @return {?}
     */
    refresh() {
        if (this._content) {
            this._loadContent(this._content);
        }
        else if (this._viewInit) {
            this._loadContent(((/** @type {?} */ (this._elementRef.nativeElement))).textContent);
        }
    }
    /**
     * General method to parse a string markdown into HTML Elements and load them into the container
     * @param {?} markdown
     * @return {?}
     */
    _loadContent(markdown) {
        if (markdown && markdown.trim().length > 0) {
            // Clean container
            this._renderer.setProperty(this._elementRef.nativeElement, 'innerHTML', '');
            // Parse html string into actual HTML elements.
            /** @type {?} */
            let divElement = this._elementFromString(this._render(markdown));
        }
        this.removeAnchorListeners();
        this.handleAnchorClicksBound = this.handleAnchorClicks.bind(this);
        this.attachAnchorListeners();
        // TODO: timeout required since resizing of html elements occurs which causes a change in the scroll position
        setTimeout(() => scrollToAnchor(this._elementRef.nativeElement, this._anchor), 250);
        this.onContentReady.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleAnchorClicks(event) {
        return __awaiter(this, void 0, void 0, function* () {
            event.preventDefault();
            /** @type {?} */
            const url = new URL(((/** @type {?} */ (event.target))).href);
            /** @type {?} */
            const hash = decodeURI(url.hash);
            scrollToAnchor(this._elementRef.nativeElement, hash);
        });
    }
    /**
     * @return {?}
     */
    attachAnchorListeners() {
        // TODO: rxjs fromEvent
        Array.from(this._elementRef.nativeElement.querySelectorAll('a[href]'))
            .filter((link) => isAnchorLink(link))
            .forEach((link) => link.addEventListener('click', this.handleAnchorClicksBound));
    }
    /**
     * @return {?}
     */
    removeAnchorListeners() {
        Array.from(this._elementRef.nativeElement.querySelectorAll('a[href]'))
            .filter((link) => isAnchorLink(link))
            .forEach((link) => link.removeEventListener('click', this.handleAnchorClicksBound));
    }
    /**
     * @param {?} markupStr
     * @return {?}
     */
    _elementFromString(markupStr) {
        // Renderer2 doesnt have a parsing method, so we have to sanitize and use [innerHTML]
        // to parse the string into DOM element for now.
        /** @type {?} */
        const div = this._renderer.createElement('div');
        this._renderer.appendChild(this._elementRef.nativeElement, div);
        /** @type {?} */
        const html = this._domSanitizer.sanitize(SecurityContext.HTML, markupStr);
        /** @type {?} */
        const htmlWithAbsoluteHrefs = normalizeHtmlHrefs(html, this._hostedUrl);
        /** @type {?} */
        const htmlWithAbsoluteImgSrcs = normalizeImageSrcs(htmlWithAbsoluteHrefs, this._hostedUrl);
        /** @type {?} */
        const htmlWithHeadingIds = addIdsToHeadings(htmlWithAbsoluteImgSrcs);
        div.innerHTML = htmlWithHeadingIds;
        return div;
    }
    /**
     * @param {?} markdown
     * @return {?}
     */
    _render(markdown) {
        // Trim leading and trailing newlines
        markdown = markdown.replace(/^(\s|\t)*\n+/g, '').replace(/(\s|\t)*\n+(\s|\t)*$/g, '');
        // Split markdown by line characters
        /** @type {?} */
        let lines = markdown.split('\n');
        // check how much indentation is used by the first actual markdown line
        /** @type {?} */
        let firstLineWhitespace = lines[0].match(/^(\s|\t)*/)[0];
        // Remove all indentation spaces so markdown can be parsed correctly
        /** @type {?} */
        let startingWhitespaceRegex = new RegExp('^' + firstLineWhitespace);
        lines = lines.map(function (line) {
            return line.replace(startingWhitespaceRegex, '');
        });
        // Join lines again with line characters
        /** @type {?} */
        let markdownToParse = lines.join('\n');
        // Convert markdown into html
        /** @type {?} */
        let converter = new showdown.Converter();
        converter.setOption('ghCodeBlocks', true);
        converter.setOption('tasklists', true);
        converter.setOption('tables', true);
        converter.setOption('simpleLineBreaks', this._simpleLineBreaks);
        /** @type {?} */
        let html = converter.makeHtml(markdownToParse);
        return html;
    }
}
TdMarkdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'td-markdown',
                template: "<ng-content></ng-content>",
                styles: [":host.td-markdown::ng-deep a{background-color:transparent;-webkit-text-decoration-skip:objects;text-decoration:none}:host.td-markdown::ng-deep a:active,:host.td-markdown::ng-deep a:hover{outline-width:0;text-decoration:underline}:host.td-markdown::ng-deep strong{font-weight:bolder}:host.td-markdown::ng-deep h1{margin:.67em 0}:host.td-markdown::ng-deep img{border-style:none}:host.td-markdown::ng-deep svg:not(:root){overflow:hidden}:host.td-markdown::ng-deep code,:host.td-markdown::ng-deep kbd,:host.td-markdown::ng-deep pre{font-family:monospace,monospace;font-size:1em}:host.td-markdown::ng-deep hr{-webkit-box-sizing:content-box;box-sizing:content-box}:host.td-markdown::ng-deep input{margin:0;overflow:visible;font:13px/1.4 Helvetica,arial,nimbussansl,liberationsans,freesans,clean,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\"}:host.td-markdown::ng-deep [type=button]:-moz-focusring,:host.td-markdown::ng-deep [type=reset]:-moz-focusring,:host.td-markdown::ng-deep [type=submit]:-moz-focusring,:host.td-markdown::ng-deep button:-moz-focusring{outline:ButtonText dotted 1px}:host.td-markdown::ng-deep [type=checkbox]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}:host.td-markdown::ng-deep td,:host.td-markdown::ng-deep th{padding:0}:host.td-markdown::ng-deep *{-webkit-box-sizing:border-box;box-sizing:border-box}:host.td-markdown::ng-deep hr::before{display:table;content:\"\"}:host.td-markdown::ng-deep hr::after{display:table;clear:both;content:\"\"}:host.td-markdown::ng-deep p{margin-top:0;margin-bottom:10px}:host.td-markdown::ng-deep blockquote{margin:0}:host.td-markdown::ng-deep ol,:host.td-markdown::ng-deep ul{margin-top:0;margin-bottom:0;padding-left:2em}:host.td-markdown::ng-deep ol ol,:host.td-markdown::ng-deep ul ol{list-style-type:lower-roman}:host.td-markdown::ng-deep ol ol ol,:host.td-markdown::ng-deep ol ul ol,:host.td-markdown::ng-deep ul ol ol,:host.td-markdown::ng-deep ul ul ol{list-style-type:lower-alpha}:host.td-markdown::ng-deep dd{margin-left:0}:host.td-markdown::ng-deep code{font-family:Consolas,\"Liberation Mono\",Menlo,Courier,monospace}:host.td-markdown::ng-deep pre{margin-top:0;margin-bottom:0;font:12px Consolas,\"Liberation Mono\",Menlo,Courier,monospace;word-wrap:normal}:host.td-markdown::ng-deep .pl-0{padding-left:0!important}:host.td-markdown::ng-deep .pl-1{padding-left:3px!important}:host.td-markdown::ng-deep .pl-2{padding-left:6px!important}:host.td-markdown::ng-deep .pl-3{padding-left:12px!important}:host.td-markdown::ng-deep .pl-4{padding-left:24px!important}:host.td-markdown::ng-deep .pl-5{padding-left:36px!important}:host.td-markdown::ng-deep .pl-6{padding-left:48px!important}:host.td-markdown::ng-deep .form-select::-ms-expand{opacity:0}:host.td-markdown::ng-deep a:not([href]){color:inherit;text-decoration:none}:host.td-markdown::ng-deep h1,:host.td-markdown::ng-deep h2,:host.td-markdown::ng-deep h3,:host.td-markdown::ng-deep h4,:host.td-markdown::ng-deep h5,:host.td-markdown::ng-deep h6{margin-top:1em;margin-bottom:16px;font-weight:700;line-height:1.4}:host.td-markdown::ng-deep h1 .octicon-link,:host.td-markdown::ng-deep h2 .octicon-link,:host.td-markdown::ng-deep h3 .octicon-link,:host.td-markdown::ng-deep h4 .octicon-link,:host.td-markdown::ng-deep h5 .octicon-link,:host.td-markdown::ng-deep h6 .octicon-link{color:#000;vertical-align:middle;visibility:hidden}:host.td-markdown::ng-deep h1:hover .anchor,:host.td-markdown::ng-deep h2:hover .anchor,:host.td-markdown::ng-deep h3:hover .anchor,:host.td-markdown::ng-deep h4:hover .anchor,:host.td-markdown::ng-deep h5:hover .anchor,:host.td-markdown::ng-deep h6:hover .anchor{text-decoration:none}:host.td-markdown::ng-deep h1:hover .anchor .octicon-link,:host.td-markdown::ng-deep h2:hover .anchor .octicon-link,:host.td-markdown::ng-deep h3:hover .anchor .octicon-link,:host.td-markdown::ng-deep h4:hover .anchor .octicon-link,:host.td-markdown::ng-deep h5:hover .anchor .octicon-link,:host.td-markdown::ng-deep h6:hover .anchor .octicon-link{visibility:visible}:host.td-markdown::ng-deep h1{padding-bottom:.3em;font-size:2.25em;line-height:1.2;border-bottom-width:1px;border-bottom-style:solid}:host.td-markdown::ng-deep h1 .anchor{line-height:1}:host.td-markdown::ng-deep h2{padding-bottom:.3em;font-size:1.75em;line-height:1.225;border-bottom-width:1px;border-bottom-style:solid}:host.td-markdown::ng-deep h2 .anchor{line-height:1}:host.td-markdown::ng-deep h3{font-size:1.5em;line-height:1.43}:host.td-markdown::ng-deep h3 .anchor{line-height:1.2}:host.td-markdown::ng-deep h4{font-size:1.25em}:host.td-markdown::ng-deep h4 .anchor{line-height:1.2}:host.td-markdown::ng-deep h5{font-size:1em}:host.td-markdown::ng-deep h5 .anchor{line-height:1.1}:host.td-markdown::ng-deep h6{font-size:1em}:host.td-markdown::ng-deep h6 .anchor{line-height:1.1}:host.td-markdown::ng-deep blockquote,:host.td-markdown::ng-deep dl,:host.td-markdown::ng-deep ol,:host.td-markdown::ng-deep p,:host.td-markdown::ng-deep pre,:host.td-markdown::ng-deep table,:host.td-markdown::ng-deep ul{margin-top:0;margin-bottom:16px}:host.td-markdown::ng-deep hr{height:0;overflow:hidden;background:0 0;border-bottom-width:1px;border-bottom-style:solid;margin:16px 0}:host.td-markdown::ng-deep ol ol,:host.td-markdown::ng-deep ol ul,:host.td-markdown::ng-deep ul ol,:host.td-markdown::ng-deep ul ul{margin-top:0;margin-bottom:0}:host.td-markdown::ng-deep li>p{margin-top:16px}:host.td-markdown::ng-deep dl{padding:0}:host.td-markdown::ng-deep dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic;font-weight:700}:host.td-markdown::ng-deep dl dd{padding:0 16px;margin-bottom:16px}:host.td-markdown::ng-deep blockquote{padding:0 15px;border-left-width:4px;border-left-style:solid}:host.td-markdown::ng-deep blockquote>:first-child{margin-top:0}:host.td-markdown::ng-deep blockquote>:last-child{margin-bottom:0}:host.td-markdown::ng-deep table{border-spacing:0;border-collapse:collapse;display:block;width:100%;overflow:auto;word-break:normal;word-break:keep-all}:host.td-markdown::ng-deep table th{font-weight:700}:host.td-markdown::ng-deep table td,:host.td-markdown::ng-deep table th{padding:6px 13px;border-width:1px;border-style:solid}:host.td-markdown::ng-deep table tr{border-top-width:1px;border-top-style:solid}:host.td-markdown::ng-deep img{max-width:100%;-webkit-box-sizing:content-box;box-sizing:content-box}:host.td-markdown::ng-deep code{padding:.2em 0;margin:0;font-size:85%;border-radius:3px}:host.td-markdown::ng-deep code:after,:host.td-markdown::ng-deep code:before{letter-spacing:-.2em}:host.td-markdown::ng-deep pre>code{padding:0;margin:0;font-size:100%;word-break:normal;white-space:pre;background:0 0;border:0}:host.td-markdown::ng-deep .highlight{margin-bottom:16px}:host.td-markdown::ng-deep .highlight pre,:host.td-markdown::ng-deep pre{padding:16px;overflow:auto;font-size:85%;line-height:1.45;border-radius:3px}:host.td-markdown::ng-deep .highlight pre{margin-bottom:0;word-break:normal}:host.td-markdown::ng-deep pre code{display:inline;max-width:initial;padding:0;margin:0;overflow:initial;line-height:inherit;word-wrap:normal;background-color:transparent;border:0}:host.td-markdown::ng-deep pre code:after,:host.td-markdown::ng-deep pre code:before{content:normal}:host.td-markdown::ng-deep .pl-c{color:#969896}:host.td-markdown::ng-deep .pl-c1,:host.td-markdown::ng-deep .pl-s .pl-v{color:#0086b3}:host.td-markdown::ng-deep .pl-e,:host.td-markdown::ng-deep .pl-en{color:#795da3}:host.td-markdown::ng-deep .pl-s .pl-s1,:host.td-markdown::ng-deep .pl-smi{color:#333}:host.td-markdown::ng-deep .pl-ent{color:#63a35c}:host.td-markdown::ng-deep .pl-k{color:#a71d5d}:host.td-markdown::ng-deep .pl-pds,:host.td-markdown::ng-deep .pl-s,:host.td-markdown::ng-deep .pl-s .pl-pse .pl-s1,:host.td-markdown::ng-deep .pl-sr,:host.td-markdown::ng-deep .pl-sr .pl-cce,:host.td-markdown::ng-deep .pl-sr .pl-sra,:host.td-markdown::ng-deep .pl-sr .pl-sre{color:#183691}:host.td-markdown::ng-deep .pl-v{color:#ed6a43}:host.td-markdown::ng-deep .pl-id{color:#b52a1d}:host.td-markdown::ng-deep .pl-ii{background-color:#b52a1d;color:#f8f8f8}:host.td-markdown::ng-deep .pl-sr .pl-cce{color:#63a35c;font-weight:700}:host.td-markdown::ng-deep .pl-ml{color:#693a17}:host.td-markdown::ng-deep .pl-mh,:host.td-markdown::ng-deep .pl-mh .pl-en,:host.td-markdown::ng-deep .pl-ms{color:#1d3e81;font-weight:700}:host.td-markdown::ng-deep .pl-mq{color:teal}:host.td-markdown::ng-deep .pl-mi{color:#333;font-style:italic}:host.td-markdown::ng-deep .pl-mb{color:#333;font-weight:700}:host.td-markdown::ng-deep .pl-md{background-color:#ffecec;color:#bd2c00}:host.td-markdown::ng-deep .pl-mi1{background-color:#eaffea;color:#55a532}:host.td-markdown::ng-deep .pl-mdr{color:#795da3;font-weight:700}:host.td-markdown::ng-deep .pl-mo{color:#1d3e81}:host.td-markdown::ng-deep kbd{display:inline-block;padding:3px 5px;font:11px/10px Consolas,\"Liberation Mono\",Menlo,Courier,monospace;vertical-align:middle;background-color:#fcfcfc;border:1px solid #ccc;border-bottom-color:#bbb;border-radius:3px;-webkit-box-shadow:inset 0 -1px 0 #bbb;box-shadow:inset 0 -1px 0 #bbb}:host.td-markdown::ng-deep .full-commit .btn-outline:not(:disabled):hover{color:#4078c0;border:1px solid #4078c0}:host.td-markdown::ng-deep :checked+.radio-label{position:relative;z-index:1;border-color:#4078c0}:host.td-markdown::ng-deep .octicon{display:inline-block;vertical-align:text-top;fill:currentColor}:host.td-markdown::ng-deep .task-list-item{list-style-type:none}:host.td-markdown::ng-deep .task-list-item+.task-list-item{margin-top:3px}:host.td-markdown::ng-deep .task-list-item input{margin:0 .2em .25em -1.6em;vertical-align:middle}"]
            }] }
];
/** @nocollapse */
TdMarkdownComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: DomSanitizer }
];
TdMarkdownComponent.propDecorators = {
    class: [{ type: HostBinding, args: ['class',] }],
    content: [{ type: Input, args: ['content',] }],
    simpleLineBreaks: [{ type: Input, args: ['simpleLineBreaks',] }],
    hostedUrl: [{ type: Input, args: ['hostedUrl',] }],
    anchor: [{ type: Input, args: ['anchor',] }],
    onContentReady: [{ type: Output, args: ['contentReady',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class CovalentMarkdownModule {
}
CovalentMarkdownModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                ],
                declarations: [
                    TdMarkdownComponent,
                ],
                exports: [
                    TdMarkdownComponent,
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class MarkdownLoaderService {
    /**
     * @param {?} _http
     * @param {?} _sanitizer
     */
    constructor(_http, _sanitizer) {
        this._http = _http;
        this._sanitizer = _sanitizer;
    }
    /**
     * @param {?} url
     * @param {?=} httpOptions
     * @return {?}
     */
    load(url, httpOptions = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.URL, url);
            /** @type {?} */
            let urlToGet = sanitizedUrl;
            if (isGithubHref(sanitizedUrl)) {
                urlToGet = rawGithubHref(sanitizedUrl);
            }
            /** @type {?} */
            const response = yield this._http
                .get(urlToGet, Object.assign({}, httpOptions, { responseType: 'text', observe: 'response' }))
                .toPromise();
            /** @type {?} */
            const contentType = response.headers.get('Content-Type');
            if (contentType.includes('text/plain') || contentType.includes('text/markdown')) {
                return response.body;
            }
            else {
                throw Error(`${contentType} is not a handled content type`);
            }
        });
    }
}
MarkdownLoaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
MarkdownLoaderService.ctorParameters = () => [
    { type: HttpClient },
    { type: Sanitizer }
];
/** @nocollapse */ MarkdownLoaderService.ngInjectableDef = defineInjectable({ factory: function MarkdownLoaderService_Factory() { return new MarkdownLoaderService(inject(HttpClient), inject(Sanitizer)); }, token: MarkdownLoaderService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { CovalentMarkdownModule, TdMarkdownComponent, removeLeadingHash, removeTrailingHash, normalizeAnchor, scrollToAnchor, isAnchorLink, rawGithubHref, isGithubHref, MarkdownLoaderService };

//# sourceMappingURL=covalent-markdown.js.map