/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Sanitizer, SecurityContext } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { isGithubHref, rawGithubHref } from './markdown-utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class MarkdownLoaderService {
    /**
     * @param {?} _http
     * @param {?} _sanitizer
     */
    constructor(_http, _sanitizer) {
        this._http = _http;
        this._sanitizer = _sanitizer;
    }
    /**
     * @param {?} url
     * @param {?=} httpOptions
     * @return {?}
     */
    load(url, httpOptions = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.URL, url);
            /** @type {?} */
            let urlToGet = sanitizedUrl;
            if (isGithubHref(sanitizedUrl)) {
                urlToGet = rawGithubHref(sanitizedUrl);
            }
            /** @type {?} */
            const response = yield this._http
                .get(urlToGet, Object.assign({}, httpOptions, { responseType: 'text', observe: 'response' }))
                .toPromise();
            /** @type {?} */
            const contentType = response.headers.get('Content-Type');
            if (contentType.includes('text/plain') || contentType.includes('text/markdown')) {
                return response.body;
            }
            else {
                throw Error(`${contentType} is not a handled content type`);
            }
        });
    }
}
MarkdownLoaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
MarkdownLoaderService.ctorParameters = () => [
    { type: HttpClient },
    { type: Sanitizer }
];
/** @nocollapse */ MarkdownLoaderService.ngInjectableDef = i0.defineInjectable({ factory: function MarkdownLoaderService_Factory() { return new MarkdownLoaderService(i0.inject(i1.HttpClient), i0.inject(i0.Sanitizer)); }, token: MarkdownLoaderService, providedIn: "root" });
if (false) {
    /** @type {?} */
    MarkdownLoaderService.prototype._http;
    /** @type {?} */
    MarkdownLoaderService.prototype._sanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24tbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY292YWxlbnQvbWFya2Rvd24vIiwic291cmNlcyI6WyJtYXJrZG93bi1sb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsVUFBVSxFQUFnQixNQUFNLHNCQUFzQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7OztBQUsvRCxNQUFNLE9BQU8scUJBQXFCOzs7OztJQUNoQyxZQUFvQixLQUFpQixFQUFVLFVBQXFCO1FBQWhELFVBQUssR0FBTCxLQUFLLENBQVk7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFXO0lBQUcsQ0FBQzs7Ozs7O0lBRWxFLElBQUksQ0FBQyxHQUFXLEVBQUUsY0FBc0IsRUFBRTs7O2tCQUN4QyxZQUFZLEdBQVcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7O2dCQUMzRSxRQUFRLEdBQVcsWUFBWTtZQUNuQyxJQUFJLFlBQVksQ0FBQyxZQUFZLENBQUMsRUFBRTtnQkFDOUIsUUFBUSxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUN4Qzs7a0JBRUssUUFBUSxHQUF5QixNQUFNLElBQUksQ0FBQyxLQUFLO2lCQUNwRCxHQUFHLENBQUMsUUFBUSxvQkFBTyxXQUFXLElBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsVUFBVSxJQUFHO2lCQUM1RSxTQUFTLEVBQUU7O2tCQUNSLFdBQVcsR0FBVyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUM7WUFDaEUsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEVBQUU7Z0JBQy9FLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQzthQUN0QjtpQkFBTTtnQkFDTCxNQUFNLEtBQUssQ0FBQyxHQUFHLFdBQVcsZ0NBQWdDLENBQUMsQ0FBQzthQUM3RDtRQUNILENBQUM7S0FBQTs7O1lBdEJGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQUxRLFVBQVU7WUFERSxTQUFTOzs7OztJQVFoQixzQ0FBeUI7O0lBQUUsMkNBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgU2FuaXRpemVyLCBTZWN1cml0eUNvbnRleHQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IGlzR2l0aHViSHJlZiwgcmF3R2l0aHViSHJlZiB9IGZyb20gJy4vbWFya2Rvd24tdXRpbHMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTWFya2Rvd25Mb2FkZXJTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaHR0cDogSHR0cENsaWVudCwgcHJpdmF0ZSBfc2FuaXRpemVyOiBTYW5pdGl6ZXIpIHt9XG5cbiAgYXN5bmMgbG9hZCh1cmw6IHN0cmluZywgaHR0cE9wdGlvbnM6IG9iamVjdCA9IHt9KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBzYW5pdGl6ZWRVcmw6IHN0cmluZyA9IHRoaXMuX3Nhbml0aXplci5zYW5pdGl6ZShTZWN1cml0eUNvbnRleHQuVVJMLCB1cmwpO1xuICAgIGxldCB1cmxUb0dldDogc3RyaW5nID0gc2FuaXRpemVkVXJsO1xuICAgIGlmIChpc0dpdGh1YkhyZWYoc2FuaXRpemVkVXJsKSkge1xuICAgICAgdXJsVG9HZXQgPSByYXdHaXRodWJIcmVmKHNhbml0aXplZFVybCk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2U6IEh0dHBSZXNwb25zZTxzdHJpbmc+ID0gYXdhaXQgdGhpcy5faHR0cFxuICAgICAgLmdldCh1cmxUb0dldCwgeyAuLi5odHRwT3B0aW9ucywgcmVzcG9uc2VUeXBlOiAndGV4dCcsIG9ic2VydmU6ICdyZXNwb25zZScgfSlcbiAgICAgIC50b1Byb21pc2UoKTtcbiAgICBjb25zdCBjb250ZW50VHlwZTogc3RyaW5nID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmIChjb250ZW50VHlwZS5pbmNsdWRlcygndGV4dC9wbGFpbicpIHx8IGNvbnRlbnRUeXBlLmluY2x1ZGVzKCd0ZXh0L21hcmtkb3duJykpIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5ib2R5O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcihgJHtjb250ZW50VHlwZX0gaXMgbm90IGEgaGFuZGxlZCBjb250ZW50IHR5cGVgKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==