/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @param {?} str
 * @return {?}
 */
export function removeLeadingHash(str) {
    if (str) {
        return str.replace(/^#+/, '');
    }
    return undefined;
}
/**
 * @param {?} str
 * @return {?}
 */
export function removeTrailingHash(str) {
    if (str) {
        return str.replace(/\#.*/, '');
    }
    return undefined;
}
/**
 * @param {?} str
 * @return {?}
 */
export function normalizeAnchor(str) {
    if (str) {
        return removeLeadingHash(str.replace(/(_|-|\s)+/g, '')).toLowerCase();
    }
    return undefined;
}
/**
 * @param {?} element
 * @param {?} anchor
 * @return {?}
 */
export function scrollToAnchor(element, anchor) {
    if (element && anchor) {
        /** @type {?} */
        const normalizedAnchor = normalizeAnchor(anchor);
        /** @type {?} */
        const parent = element.parentElement;
        /** @type {?} */
        let headingToJumpTo;
        /** @type {?} */
        const headingWithinComponent = element.querySelector(`[id="${normalizedAnchor}"]`);
        if (headingWithinComponent) {
            headingToJumpTo = headingWithinComponent;
        }
        else if (parent) {
            headingToJumpTo = parent.querySelector(`[id="${normalizedAnchor}"]`);
        }
        if (headingToJumpTo) {
            headingToJumpTo.scrollIntoView({ behavior: 'auto' });
        }
        else {
            // TODO: leave this warning?
            // tslint:disable-next-line
            console.warn(`Could not jump to heading '${anchor}'`);
        }
    }
}
/**
 * @param {?} anchor
 * @return {?}
 */
export function isAnchorLink(anchor) {
    if (anchor) {
        return anchor.getAttribute('href').startsWith('#');
    }
}
/**
 * @param {?} githubHref
 * @return {?}
 */
export function rawGithubHref(githubHref) {
    if (githubHref) {
        /** @type {?} */
        const url = new URL(githubHref);
        if (url.pathname.startsWith('/raw/')) {
            return githubHref;
        }
        else {
            url.hostname = 'raw.githubusercontent.com';
            url.pathname = url.pathname.split('/blob', 2).join('');
            return url.href;
        }
    }
    return undefined;
}
/**
 * @param {?} href
 * @return {?}
 */
export function isGithubHref(href) {
    try {
        /** @type {?} */
        const temp = new URL(href);
        return temp.hostname === 'github.com';
    }
    catch (_a) {
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24tdXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY292YWxlbnQvbWFya2Rvd24vIiwic291cmNlcyI6WyJtYXJrZG93bi11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxHQUFXO0lBQzNDLElBQUksR0FBRyxFQUFFO1FBQ1AsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztLQUMvQjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLGtCQUFrQixDQUFDLEdBQVc7SUFDNUMsSUFBSSxHQUFHLEVBQUU7UUFDUCxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ2hDO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLEdBQVc7SUFDekMsSUFBSSxHQUFHLEVBQUU7UUFDUCxPQUFPLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDdkU7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLE9BQW9CLEVBQUUsTUFBYztJQUNqRSxJQUFJLE9BQU8sSUFBSSxNQUFNLEVBQUU7O2NBQ2YsZ0JBQWdCLEdBQVcsZUFBZSxDQUFDLE1BQU0sQ0FBQzs7Y0FDbEQsTUFBTSxHQUFnQixPQUFPLENBQUMsYUFBYTs7WUFFN0MsZUFBNEI7O2NBQzFCLHNCQUFzQixHQUFnQixPQUFPLENBQUMsYUFBYSxDQUFDLFFBQVEsZ0JBQWdCLElBQUksQ0FBQztRQUUvRixJQUFJLHNCQUFzQixFQUFFO1lBQzFCLGVBQWUsR0FBRyxzQkFBc0IsQ0FBQztTQUMxQzthQUFNLElBQUksTUFBTSxFQUFFO1lBQ2pCLGVBQWUsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLFFBQVEsZ0JBQWdCLElBQUksQ0FBQyxDQUFDO1NBQ3RFO1FBQ0QsSUFBSSxlQUFlLEVBQUU7WUFDbkIsZUFBZSxDQUFDLGNBQWMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1NBQ3REO2FBQU07WUFDTCw0QkFBNEI7WUFDNUIsMkJBQTJCO1lBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsOEJBQThCLE1BQU0sR0FBRyxDQUFDLENBQUM7U0FDdkQ7S0FDRjtBQUNILENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUF5QjtJQUNwRCxJQUFJLE1BQU0sRUFBRTtRQUNWLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDcEQ7QUFDSCxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsVUFBa0I7SUFDOUMsSUFBSSxVQUFVLEVBQUU7O2NBQ1IsR0FBRyxHQUFRLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUNwQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3BDLE9BQU8sVUFBVSxDQUFDO1NBQ25CO2FBQU07WUFDTCxHQUFHLENBQUMsUUFBUSxHQUFHLDJCQUEyQixDQUFDO1lBQzNDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN2RCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUM7U0FDakI7S0FDRjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUFZO0lBQ3ZDLElBQUk7O2NBQ0ksSUFBSSxHQUFRLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQztRQUMvQixPQUFPLElBQUksQ0FBQyxRQUFRLEtBQUssWUFBWSxDQUFDO0tBQ3ZDO0lBQUMsV0FBTTtRQUNOLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUxlYWRpbmdIYXNoKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvXiMrLywgJycpO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVUcmFpbGluZ0hhc2goc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXCMuKi8sICcnKTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplQW5jaG9yKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKHN0cikge1xuICAgIHJldHVybiByZW1vdmVMZWFkaW5nSGFzaChzdHIucmVwbGFjZSgvKF98LXxcXHMpKy9nLCAnJykpLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbFRvQW5jaG9yKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBhbmNob3I6IHN0cmluZyk6IHZvaWQge1xuICBpZiAoZWxlbWVudCAmJiBhbmNob3IpIHtcbiAgICBjb25zdCBub3JtYWxpemVkQW5jaG9yOiBzdHJpbmcgPSBub3JtYWxpemVBbmNob3IoYW5jaG9yKTtcbiAgICBjb25zdCBwYXJlbnQ6IEhUTUxFbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuXG4gICAgbGV0IGhlYWRpbmdUb0p1bXBUbzogSFRNTEVsZW1lbnQ7XG4gICAgY29uc3QgaGVhZGluZ1dpdGhpbkNvbXBvbmVudDogSFRNTEVsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYFtpZD1cIiR7bm9ybWFsaXplZEFuY2hvcn1cIl1gKTtcblxuICAgIGlmIChoZWFkaW5nV2l0aGluQ29tcG9uZW50KSB7XG4gICAgICBoZWFkaW5nVG9KdW1wVG8gPSBoZWFkaW5nV2l0aGluQ29tcG9uZW50O1xuICAgIH0gZWxzZSBpZiAocGFyZW50KSB7XG4gICAgICBoZWFkaW5nVG9KdW1wVG8gPSBwYXJlbnQucXVlcnlTZWxlY3RvcihgW2lkPVwiJHtub3JtYWxpemVkQW5jaG9yfVwiXWApO1xuICAgIH1cbiAgICBpZiAoaGVhZGluZ1RvSnVtcFRvKSB7XG4gICAgICBoZWFkaW5nVG9KdW1wVG8uc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ2F1dG8nIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPOiBsZWF2ZSB0aGlzIHdhcm5pbmc/XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGNvbnNvbGUud2FybihgQ291bGQgbm90IGp1bXAgdG8gaGVhZGluZyAnJHthbmNob3J9J2ApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBbmNob3JMaW5rKGFuY2hvcjogSFRNTEFuY2hvckVsZW1lbnQpOiBib29sZWFuIHtcbiAgaWYgKGFuY2hvcikge1xuICAgIHJldHVybiBhbmNob3IuZ2V0QXR0cmlidXRlKCdocmVmJykuc3RhcnRzV2l0aCgnIycpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYXdHaXRodWJIcmVmKGdpdGh1YkhyZWY6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmIChnaXRodWJIcmVmKSB7XG4gICAgY29uc3QgdXJsOiBVUkwgPSBuZXcgVVJMKGdpdGh1YkhyZWYpO1xuICAgIGlmICh1cmwucGF0aG5hbWUuc3RhcnRzV2l0aCgnL3Jhdy8nKSkge1xuICAgICAgcmV0dXJuIGdpdGh1YkhyZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVybC5ob3N0bmFtZSA9ICdyYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tJztcbiAgICAgIHVybC5wYXRobmFtZSA9IHVybC5wYXRobmFtZS5zcGxpdCgnL2Jsb2InLCAyKS5qb2luKCcnKTtcbiAgICAgIHJldHVybiB1cmwuaHJlZjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzR2l0aHViSHJlZihocmVmOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB0ZW1wOiBVUkwgPSBuZXcgVVJMKGhyZWYpO1xuICAgIHJldHVybiB0ZW1wLmhvc3RuYW1lID09PSAnZ2l0aHViLmNvbSc7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl19