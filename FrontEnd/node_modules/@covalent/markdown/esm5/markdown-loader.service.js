/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Sanitizer, SecurityContext } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { isGithubHref, rawGithubHref } from './markdown-utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var MarkdownLoaderService = /** @class */ (function () {
    function MarkdownLoaderService(_http, _sanitizer) {
        this._http = _http;
        this._sanitizer = _sanitizer;
    }
    /**
     * @param {?} url
     * @param {?=} httpOptions
     * @return {?}
     */
    MarkdownLoaderService.prototype.load = /**
     * @param {?} url
     * @param {?=} httpOptions
     * @return {?}
     */
    function (url, httpOptions) {
        if (httpOptions === void 0) { httpOptions = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var sanitizedUrl, urlToGet, response, contentType;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sanitizedUrl = this._sanitizer.sanitize(SecurityContext.URL, url);
                        urlToGet = sanitizedUrl;
                        if (isGithubHref(sanitizedUrl)) {
                            urlToGet = rawGithubHref(sanitizedUrl);
                        }
                        return [4 /*yield*/, this._http
                                .get(urlToGet, tslib_1.__assign({}, httpOptions, { responseType: 'text', observe: 'response' }))
                                .toPromise()];
                    case 1:
                        response = _a.sent();
                        contentType = response.headers.get('Content-Type');
                        if (contentType.includes('text/plain') || contentType.includes('text/markdown')) {
                            return [2 /*return*/, response.body];
                        }
                        else {
                            throw Error(contentType + " is not a handled content type");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    MarkdownLoaderService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    MarkdownLoaderService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Sanitizer }
    ]; };
    /** @nocollapse */ MarkdownLoaderService.ngInjectableDef = i0.defineInjectable({ factory: function MarkdownLoaderService_Factory() { return new MarkdownLoaderService(i0.inject(i1.HttpClient), i0.inject(i0.Sanitizer)); }, token: MarkdownLoaderService, providedIn: "root" });
    return MarkdownLoaderService;
}());
export { MarkdownLoaderService };
if (false) {
    /** @type {?} */
    MarkdownLoaderService.prototype._http;
    /** @type {?} */
    MarkdownLoaderService.prototype._sanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24tbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY292YWxlbnQvbWFya2Rvd24vIiwic291cmNlcyI6WyJtYXJrZG93bi1sb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsVUFBVSxFQUFnQixNQUFNLHNCQUFzQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7OztBQUUvRDtJQUlFLCtCQUFvQixLQUFpQixFQUFVLFVBQXFCO1FBQWhELFVBQUssR0FBTCxLQUFLLENBQVk7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFXO0lBQUcsQ0FBQzs7Ozs7O0lBRWxFLG9DQUFJOzs7OztJQUFWLFVBQVcsR0FBVyxFQUFFLFdBQXdCO1FBQXhCLDRCQUFBLEVBQUEsZ0JBQXdCOzs7Ozs7d0JBQ3hDLFlBQVksR0FBVyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQzt3QkFDM0UsUUFBUSxHQUFXLFlBQVk7d0JBQ25DLElBQUksWUFBWSxDQUFDLFlBQVksQ0FBQyxFQUFFOzRCQUM5QixRQUFRLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO3lCQUN4Qzt3QkFFc0MscUJBQU0sSUFBSSxDQUFDLEtBQUs7aUNBQ3BELEdBQUcsQ0FBQyxRQUFRLHVCQUFPLFdBQVcsSUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLElBQUc7aUNBQzVFLFNBQVMsRUFBRSxFQUFBOzt3QkFGUixRQUFRLEdBQXlCLFNBRXpCO3dCQUNSLFdBQVcsR0FBVyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUM7d0JBQ2hFLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxFQUFFOzRCQUMvRSxzQkFBTyxRQUFRLENBQUMsSUFBSSxFQUFDO3lCQUN0Qjs2QkFBTTs0QkFDTCxNQUFNLEtBQUssQ0FBSSxXQUFXLG1DQUFnQyxDQUFDLENBQUM7eUJBQzdEOzs7OztLQUNGOztnQkF0QkYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFMUSxVQUFVO2dCQURFLFNBQVM7OztnQ0FBOUI7Q0EyQkMsQUF2QkQsSUF1QkM7U0FwQlkscUJBQXFCOzs7SUFDcEIsc0NBQXlCOztJQUFFLDJDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFNhbml0aXplciwgU2VjdXJpdHlDb250ZXh0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBpc0dpdGh1YkhyZWYsIHJhd0dpdGh1YkhyZWYgfSBmcm9tICcuL21hcmtkb3duLXV0aWxzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIE1hcmtkb3duTG9hZGVyU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2h0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgX3Nhbml0aXplcjogU2FuaXRpemVyKSB7fVxuXG4gIGFzeW5jIGxvYWQodXJsOiBzdHJpbmcsIGh0dHBPcHRpb25zOiBvYmplY3QgPSB7fSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3Qgc2FuaXRpemVkVXJsOiBzdHJpbmcgPSB0aGlzLl9zYW5pdGl6ZXIuc2FuaXRpemUoU2VjdXJpdHlDb250ZXh0LlVSTCwgdXJsKTtcbiAgICBsZXQgdXJsVG9HZXQ6IHN0cmluZyA9IHNhbml0aXplZFVybDtcbiAgICBpZiAoaXNHaXRodWJIcmVmKHNhbml0aXplZFVybCkpIHtcbiAgICAgIHVybFRvR2V0ID0gcmF3R2l0aHViSHJlZihzYW5pdGl6ZWRVcmwpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlOiBIdHRwUmVzcG9uc2U8c3RyaW5nPiA9IGF3YWl0IHRoaXMuX2h0dHBcbiAgICAgIC5nZXQodXJsVG9HZXQsIHsgLi4uaHR0cE9wdGlvbnMsIHJlc3BvbnNlVHlwZTogJ3RleHQnLCBvYnNlcnZlOiAncmVzcG9uc2UnIH0pXG4gICAgICAudG9Qcm9taXNlKCk7XG4gICAgY29uc3QgY29udGVudFR5cGU6IHN0cmluZyA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAoY29udGVudFR5cGUuaW5jbHVkZXMoJ3RleHQvcGxhaW4nKSB8fCBjb250ZW50VHlwZS5pbmNsdWRlcygndGV4dC9tYXJrZG93bicpKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuYm9keTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgRXJyb3IoYCR7Y29udGVudFR5cGV9IGlzIG5vdCBhIGhhbmRsZWQgY29udGVudCB0eXBlYCk7XG4gICAgfVxuICB9XG59XG4iXX0=