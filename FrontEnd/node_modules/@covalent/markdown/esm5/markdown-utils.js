/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @param {?} str
 * @return {?}
 */
export function removeLeadingHash(str) {
    if (str) {
        return str.replace(/^#+/, '');
    }
    return undefined;
}
/**
 * @param {?} str
 * @return {?}
 */
export function removeTrailingHash(str) {
    if (str) {
        return str.replace(/\#.*/, '');
    }
    return undefined;
}
/**
 * @param {?} str
 * @return {?}
 */
export function normalizeAnchor(str) {
    if (str) {
        return removeLeadingHash(str.replace(/(_|-|\s)+/g, '')).toLowerCase();
    }
    return undefined;
}
/**
 * @param {?} element
 * @param {?} anchor
 * @return {?}
 */
export function scrollToAnchor(element, anchor) {
    if (element && anchor) {
        /** @type {?} */
        var normalizedAnchor = normalizeAnchor(anchor);
        /** @type {?} */
        var parent_1 = element.parentElement;
        /** @type {?} */
        var headingToJumpTo = void 0;
        /** @type {?} */
        var headingWithinComponent = element.querySelector("[id=\"" + normalizedAnchor + "\"]");
        if (headingWithinComponent) {
            headingToJumpTo = headingWithinComponent;
        }
        else if (parent_1) {
            headingToJumpTo = parent_1.querySelector("[id=\"" + normalizedAnchor + "\"]");
        }
        if (headingToJumpTo) {
            headingToJumpTo.scrollIntoView({ behavior: 'auto' });
        }
        else {
            // TODO: leave this warning?
            // tslint:disable-next-line
            console.warn("Could not jump to heading '" + anchor + "'");
        }
    }
}
/**
 * @param {?} anchor
 * @return {?}
 */
export function isAnchorLink(anchor) {
    if (anchor) {
        return anchor.getAttribute('href').startsWith('#');
    }
}
/**
 * @param {?} githubHref
 * @return {?}
 */
export function rawGithubHref(githubHref) {
    if (githubHref) {
        /** @type {?} */
        var url = new URL(githubHref);
        if (url.pathname.startsWith('/raw/')) {
            return githubHref;
        }
        else {
            url.hostname = 'raw.githubusercontent.com';
            url.pathname = url.pathname.split('/blob', 2).join('');
            return url.href;
        }
    }
    return undefined;
}
/**
 * @param {?} href
 * @return {?}
 */
export function isGithubHref(href) {
    try {
        /** @type {?} */
        var temp = new URL(href);
        return temp.hostname === 'github.com';
    }
    catch (_a) {
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24tdXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY292YWxlbnQvbWFya2Rvd24vIiwic291cmNlcyI6WyJtYXJrZG93bi11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxHQUFXO0lBQzNDLElBQUksR0FBRyxFQUFFO1FBQ1AsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztLQUMvQjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLGtCQUFrQixDQUFDLEdBQVc7SUFDNUMsSUFBSSxHQUFHLEVBQUU7UUFDUCxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ2hDO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLEdBQVc7SUFDekMsSUFBSSxHQUFHLEVBQUU7UUFDUCxPQUFPLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDdkU7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLE9BQW9CLEVBQUUsTUFBYztJQUNqRSxJQUFJLE9BQU8sSUFBSSxNQUFNLEVBQUU7O1lBQ2YsZ0JBQWdCLEdBQVcsZUFBZSxDQUFDLE1BQU0sQ0FBQzs7WUFDbEQsUUFBTSxHQUFnQixPQUFPLENBQUMsYUFBYTs7WUFFN0MsZUFBZSxTQUFhOztZQUMxQixzQkFBc0IsR0FBZ0IsT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFRLGdCQUFnQixRQUFJLENBQUM7UUFFL0YsSUFBSSxzQkFBc0IsRUFBRTtZQUMxQixlQUFlLEdBQUcsc0JBQXNCLENBQUM7U0FDMUM7YUFBTSxJQUFJLFFBQU0sRUFBRTtZQUNqQixlQUFlLEdBQUcsUUFBTSxDQUFDLGFBQWEsQ0FBQyxXQUFRLGdCQUFnQixRQUFJLENBQUMsQ0FBQztTQUN0RTtRQUNELElBQUksZUFBZSxFQUFFO1lBQ25CLGVBQWUsQ0FBQyxjQUFjLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUN0RDthQUFNO1lBQ0wsNEJBQTRCO1lBQzVCLDJCQUEyQjtZQUMzQixPQUFPLENBQUMsSUFBSSxDQUFDLGdDQUE4QixNQUFNLE1BQUcsQ0FBQyxDQUFDO1NBQ3ZEO0tBQ0Y7QUFDSCxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsTUFBeUI7SUFDcEQsSUFBSSxNQUFNLEVBQUU7UUFDVixPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3BEO0FBQ0gsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLFVBQWtCO0lBQzlDLElBQUksVUFBVSxFQUFFOztZQUNSLEdBQUcsR0FBUSxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUM7UUFDcEMsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNwQyxPQUFPLFVBQVUsQ0FBQztTQUNuQjthQUFNO1lBQ0wsR0FBRyxDQUFDLFFBQVEsR0FBRywyQkFBMkIsQ0FBQztZQUMzQyxHQUFHLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdkQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDO1NBQ2pCO0tBQ0Y7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBWTtJQUN2QyxJQUFJOztZQUNJLElBQUksR0FBUSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDL0IsT0FBTyxJQUFJLENBQUMsUUFBUSxLQUFLLFlBQVksQ0FBQztLQUN2QztJQUFDLFdBQU07UUFDTixPQUFPLEtBQUssQ0FBQztLQUNkO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiByZW1vdmVMZWFkaW5nSGFzaChzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL14jKy8sICcnKTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVHJhaWxpbmdIYXNoKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvXFwjLiovLCAnJyk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUFuY2hvcihzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmIChzdHIpIHtcbiAgICByZXR1cm4gcmVtb3ZlTGVhZGluZ0hhc2goc3RyLnJlcGxhY2UoLyhffC18XFxzKSsvZywgJycpKS50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxUb0FuY2hvcihlbGVtZW50OiBIVE1MRWxlbWVudCwgYW5jaG9yOiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKGVsZW1lbnQgJiYgYW5jaG9yKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplZEFuY2hvcjogc3RyaW5nID0gbm9ybWFsaXplQW5jaG9yKGFuY2hvcik7XG4gICAgY29uc3QgcGFyZW50OiBIVE1MRWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcblxuICAgIGxldCBoZWFkaW5nVG9KdW1wVG86IEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IGhlYWRpbmdXaXRoaW5Db21wb25lbnQ6IEhUTUxFbGVtZW50ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKGBbaWQ9XCIke25vcm1hbGl6ZWRBbmNob3J9XCJdYCk7XG5cbiAgICBpZiAoaGVhZGluZ1dpdGhpbkNvbXBvbmVudCkge1xuICAgICAgaGVhZGluZ1RvSnVtcFRvID0gaGVhZGluZ1dpdGhpbkNvbXBvbmVudDtcbiAgICB9IGVsc2UgaWYgKHBhcmVudCkge1xuICAgICAgaGVhZGluZ1RvSnVtcFRvID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoYFtpZD1cIiR7bm9ybWFsaXplZEFuY2hvcn1cIl1gKTtcbiAgICB9XG4gICAgaWYgKGhlYWRpbmdUb0p1bXBUbykge1xuICAgICAgaGVhZGluZ1RvSnVtcFRvLnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdhdXRvJyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVE9ETzogbGVhdmUgdGhpcyB3YXJuaW5nP1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICBjb25zb2xlLndhcm4oYENvdWxkIG5vdCBqdW1wIHRvIGhlYWRpbmcgJyR7YW5jaG9yfSdgKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQW5jaG9yTGluayhhbmNob3I6IEhUTUxBbmNob3JFbGVtZW50KTogYm9vbGVhbiB7XG4gIGlmIChhbmNob3IpIHtcbiAgICByZXR1cm4gYW5jaG9yLmdldEF0dHJpYnV0ZSgnaHJlZicpLnN0YXJ0c1dpdGgoJyMnKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmF3R2l0aHViSHJlZihnaXRodWJIcmVmOiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoZ2l0aHViSHJlZikge1xuICAgIGNvbnN0IHVybDogVVJMID0gbmV3IFVSTChnaXRodWJIcmVmKTtcbiAgICBpZiAodXJsLnBhdGhuYW1lLnN0YXJ0c1dpdGgoJy9yYXcvJykpIHtcbiAgICAgIHJldHVybiBnaXRodWJIcmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICB1cmwuaG9zdG5hbWUgPSAncmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSc7XG4gICAgICB1cmwucGF0aG5hbWUgPSB1cmwucGF0aG5hbWUuc3BsaXQoJy9ibG9iJywgMikuam9pbignJyk7XG4gICAgICByZXR1cm4gdXJsLmhyZWY7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0dpdGh1YkhyZWYoaHJlZjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdGVtcDogVVJMID0gbmV3IFVSTChocmVmKTtcbiAgICByZXR1cm4gdGVtcC5ob3N0bmFtZSA9PT0gJ2dpdGh1Yi5jb20nO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdfQ==