{"version":3,"file":"covalent-markdown.js.map","sources":["ng://@covalent/markdown/markdown-utils.ts","ng://@covalent/markdown/markdown.component.ts","ng://@covalent/markdown/markdown.module.ts","ng://@covalent/markdown/markdown-loader.service.ts"],"sourcesContent":["export function removeLeadingHash(str: string): string {\n  if (str) {\n    return str.replace(/^#+/, '');\n  }\n  return undefined;\n}\n\nexport function removeTrailingHash(str: string): string {\n  if (str) {\n    return str.replace(/\\#.*/, '');\n  }\n  return undefined;\n}\n\nexport function normalizeAnchor(str: string): string {\n  if (str) {\n    return removeLeadingHash(str.replace(/(_|-|\\s)+/g, '')).toLowerCase();\n  }\n  return undefined;\n}\n\nexport function scrollToAnchor(element: HTMLElement, anchor: string): void {\n  if (element && anchor) {\n    const normalizedAnchor: string = normalizeAnchor(anchor);\n    const parent: HTMLElement = element.parentElement;\n\n    let headingToJumpTo: HTMLElement;\n    const headingWithinComponent: HTMLElement = element.querySelector(`[id=\"${normalizedAnchor}\"]`);\n\n    if (headingWithinComponent) {\n      headingToJumpTo = headingWithinComponent;\n    } else if (parent) {\n      headingToJumpTo = parent.querySelector(`[id=\"${normalizedAnchor}\"]`);\n    }\n    if (headingToJumpTo) {\n      headingToJumpTo.scrollIntoView({ behavior: 'auto' });\n    } else {\n      // TODO: leave this warning?\n      // tslint:disable-next-line\n      console.warn(`Could not jump to heading '${anchor}'`);\n    }\n  }\n}\n\nexport function isAnchorLink(anchor: HTMLAnchorElement): boolean {\n  if (anchor) {\n    return anchor.getAttribute('href').startsWith('#');\n  }\n}\n\nexport function rawGithubHref(githubHref: string): string {\n  if (githubHref) {\n    const url: URL = new URL(githubHref);\n    if (url.pathname.startsWith('/raw/')) {\n      return githubHref;\n    } else {\n      url.hostname = 'raw.githubusercontent.com';\n      url.pathname = url.pathname.split('/blob', 2).join('');\n      return url.href;\n    }\n  }\n  return undefined;\n}\n\nexport function isGithubHref(href: string): boolean {\n  try {\n    const temp: URL = new URL(href);\n    return temp.hostname === 'github.com';\n  } catch {\n    return false;\n  }\n}\n","import {\n  Component,\n  AfterViewInit,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  Renderer2,\n  SecurityContext,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  HostBinding,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport {\n  scrollToAnchor,\n  normalizeAnchor,\n  isAnchorLink,\n  removeTrailingHash,\n  rawGithubHref,\n  isGithubHref,\n} from './markdown-utils';\n\ndeclare const require: any;\n/* tslint:disable-next-line */\nlet showdown: any = require('showdown/dist/showdown.js');\n\n// TODO: assumes it is a github url\n// allow override somehow\nfunction generateAbsoluteHref(currentHref: string, relativeHref: string): string {\n  if (currentHref && relativeHref) {\n    const currentUrl: URL = new URL(currentHref);\n    const path: string = currentUrl.pathname\n      .split('/')\n      .slice(1, -1)\n      .join('/');\n    const correctUrl: URL = new URL(currentHref);\n\n    if (relativeHref.startsWith('/')) {\n      // url is relative to top level\n      const orgAndRepo: string = path\n        .split('/')\n        .slice(0, 3)\n        .join('/');\n      correctUrl.pathname = `${orgAndRepo}${relativeHref}`;\n    } else {\n      correctUrl.pathname = `${path}/${relativeHref}`;\n    }\n    return correctUrl.href;\n  }\n  return undefined;\n}\n\nfunction normalizeHtmlHrefs(html: string, currentHref: string): string {\n  if (currentHref) {\n    const document: Document = new DOMParser().parseFromString(html, 'text/html');\n    document.querySelectorAll('a[href]').forEach((link: HTMLAnchorElement) => {\n      const url: URL = new URL(link.href);\n      const originalHash: string = url.hash;\n      if (isAnchorLink(link)) {\n        if (originalHash) {\n          url.hash = normalizeAnchor(originalHash);\n          link.href = url.hash;\n        }\n      } else if (url.host === window.location.host) {\n        // hosts match, meaning URL MIGHT have been malformed by showdown\n        // url is a relative url or just a link to a part of the application\n        if (url.pathname.endsWith('.md')) {\n          // only check .md urls\n\n          const hrefWithoutHash: string = removeTrailingHash(link.getAttribute('href'));\n\n          url.href = generateAbsoluteHref(currentHref, hrefWithoutHash);\n\n          if (originalHash) {\n            url.hash = normalizeAnchor(originalHash);\n          }\n          link.href = url.href;\n        }\n        link.target = '_blank';\n      } else {\n        // url is absolute\n        if (url.pathname.endsWith('.md')) {\n          if (originalHash) {\n            url.hash = normalizeAnchor(originalHash);\n          }\n          link.href = url.href;\n        }\n        link.target = '_blank';\n      }\n    });\n\n    return new XMLSerializer().serializeToString(document);\n  }\n  return html;\n}\n\nfunction normalizeImageSrcs(html: string, currentHref: string): string {\n  if (currentHref) {\n    const document: Document = new DOMParser().parseFromString(html, 'text/html');\n    document.querySelectorAll('img[src]').forEach((image: HTMLImageElement) => {\n      const src: string = image.getAttribute('src');\n      try {\n        /* tslint:disable-next-line:no-unused-expression */\n        new URL(src);\n        if (isGithubHref(src)) {\n          image.src = rawGithubHref(src);\n        }\n      } catch {\n        image.src = generateAbsoluteHref(isGithubHref(currentHref) ? rawGithubHref(currentHref) : currentHref, src);\n      }\n    });\n\n    return new XMLSerializer().serializeToString(document);\n  }\n  return html;\n}\n\nfunction addIdsToHeadings(html: string): string {\n  if (html) {\n    const document: Document = new DOMParser().parseFromString(html, 'text/html');\n    document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach((heading: HTMLElement) => {\n      const id: string = normalizeAnchor(heading.innerHTML);\n      heading.setAttribute('id', id);\n    });\n    return new XMLSerializer().serializeToString(document);\n  }\n  return html;\n}\n\n@Component({\n  selector: 'td-markdown',\n  styleUrls: ['./markdown.component.scss'],\n  templateUrl: './markdown.component.html',\n})\nexport class TdMarkdownComponent implements OnChanges, AfterViewInit, OnDestroy {\n  private _content: string;\n  private _simpleLineBreaks: boolean = false;\n  private _hostedUrl: string;\n  private _anchor: string;\n  private handleAnchorClicksBound: EventListenerOrEventListenerObject;\n  private _viewInit: boolean = false;\n  /**\n   * .td-markdown class added to host so ::ng-deep gets scoped.\n   */\n  @HostBinding('class') class: string = 'td-markdown';\n\n  /**\n   * content?: string\n   *\n   * Markdown format content to be parsed as html markup.\n   *\n   * e.g. README.md content.\n   */\n  @Input('content')\n  set content(content: string) {\n    this._content = content;\n  }\n\n  /**\n   * simpleLineBreaks?: string\n   *\n   * Sets whether newline characters inside paragraphs and spans are parsed as <br/>.\n   * Defaults to false.\n   */\n  @Input('simpleLineBreaks')\n  set simpleLineBreaks(simpleLineBreaks: boolean) {\n    this._simpleLineBreaks = simpleLineBreaks;\n  }\n\n  /**\n   * hostedUrl?: string\n   *\n   * If markdown contains relative paths, this is required to generate correct urls.\n   *\n   */\n  @Input('hostedUrl')\n  set hostedUrl(hostedUrl: string) {\n    this._hostedUrl = hostedUrl;\n  }\n\n  /**\n   * anchor?: string\n   *\n   * Anchor to jump to.\n   *\n   */\n  @Input('anchor')\n  set anchor(anchor: string) {\n    this._anchor = anchor;\n  }\n\n  /**\n   * contentReady?: function\n   * Event emitted after the markdown content rendering is finished.\n   */\n  @Output('contentReady') onContentReady: EventEmitter<undefined> = new EventEmitter<undefined>();\n\n  constructor(private _renderer: Renderer2, private _elementRef: ElementRef, private _domSanitizer: DomSanitizer) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // only anchor changed\n    if (changes.anchor && !changes.content && !changes.simpleLineBreaks && !changes.hostedUrl) {\n      scrollToAnchor(this._elementRef.nativeElement, this._anchor);\n    } else {\n      this.refresh();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    if (!this._content) {\n      this._loadContent((<HTMLElement>this._elementRef.nativeElement).textContent);\n    }\n    this._viewInit = true;\n  }\n\n  ngOnDestroy(): void {\n    this.removeAnchorListeners();\n  }\n\n  refresh(): void {\n    if (this._content) {\n      this._loadContent(this._content);\n    } else if (this._viewInit) {\n      this._loadContent((<HTMLElement>this._elementRef.nativeElement).textContent);\n    }\n  }\n\n  /**\n   * General method to parse a string markdown into HTML Elements and load them into the container\n   */\n  private _loadContent(markdown: string): void {\n    if (markdown && markdown.trim().length > 0) {\n      // Clean container\n      this._renderer.setProperty(this._elementRef.nativeElement, 'innerHTML', '');\n      // Parse html string into actual HTML elements.\n      let divElement: HTMLDivElement = this._elementFromString(this._render(markdown));\n    }\n    this.removeAnchorListeners();\n    this.handleAnchorClicksBound = this.handleAnchorClicks.bind(this);\n    this.attachAnchorListeners();\n    // TODO: timeout required since resizing of html elements occurs which causes a change in the scroll position\n    setTimeout(() => scrollToAnchor(this._elementRef.nativeElement, this._anchor), 250);\n    this.onContentReady.emit();\n  }\n\n  private async handleAnchorClicks(event: Event): Promise<void> {\n    event.preventDefault();\n    const url: URL = new URL((<HTMLAnchorElement>event.target).href);\n    const hash: string = decodeURI(url.hash);\n    scrollToAnchor(this._elementRef.nativeElement, hash);\n  }\n\n  private attachAnchorListeners(): void {\n    // TODO: rxjs fromEvent\n    Array.from(this._elementRef.nativeElement.querySelectorAll('a[href]'))\n      .filter((link: HTMLAnchorElement) => isAnchorLink(link))\n      .forEach((link: HTMLAnchorElement) => link.addEventListener('click', this.handleAnchorClicksBound));\n  }\n\n  private removeAnchorListeners(): void {\n    Array.from(this._elementRef.nativeElement.querySelectorAll('a[href]'))\n      .filter((link: HTMLAnchorElement) => isAnchorLink(link))\n      .forEach((link: HTMLAnchorElement) => link.removeEventListener('click', this.handleAnchorClicksBound));\n  }\n\n  private _elementFromString(markupStr: string): HTMLDivElement {\n    // Renderer2 doesnt have a parsing method, so we have to sanitize and use [innerHTML]\n    // to parse the string into DOM element for now.\n    const div: HTMLDivElement = this._renderer.createElement('div');\n    this._renderer.appendChild(this._elementRef.nativeElement, div);\n    const html: string = this._domSanitizer.sanitize(SecurityContext.HTML, markupStr);\n    const htmlWithAbsoluteHrefs: string = normalizeHtmlHrefs(html, this._hostedUrl);\n    const htmlWithAbsoluteImgSrcs: string = normalizeImageSrcs(htmlWithAbsoluteHrefs, this._hostedUrl);\n    const htmlWithHeadingIds: string = addIdsToHeadings(htmlWithAbsoluteImgSrcs);\n    div.innerHTML = htmlWithHeadingIds;\n    return div;\n  }\n\n  private _render(markdown: string): string {\n    // Trim leading and trailing newlines\n    markdown = markdown.replace(/^(\\s|\\t)*\\n+/g, '').replace(/(\\s|\\t)*\\n+(\\s|\\t)*$/g, '');\n    // Split markdown by line characters\n    let lines: string[] = markdown.split('\\n');\n\n    // check how much indentation is used by the first actual markdown line\n    let firstLineWhitespace: string = lines[0].match(/^(\\s|\\t)*/)[0];\n\n    // Remove all indentation spaces so markdown can be parsed correctly\n    let startingWhitespaceRegex: RegExp = new RegExp('^' + firstLineWhitespace);\n    lines = lines.map(function(line: string): string {\n      return line.replace(startingWhitespaceRegex, '');\n    });\n\n    // Join lines again with line characters\n    let markdownToParse: string = lines.join('\\n');\n\n    // Convert markdown into html\n    let converter: any = new showdown.Converter();\n    converter.setOption('ghCodeBlocks', true);\n    converter.setOption('tasklists', true);\n    converter.setOption('tables', true);\n    converter.setOption('simpleLineBreaks', this._simpleLineBreaks);\n    let html: string = converter.makeHtml(markdownToParse);\n    return html;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TdMarkdownComponent } from './markdown.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TdMarkdownComponent,\n  ],\n  exports: [\n    TdMarkdownComponent,\n  ],\n})\nexport class CovalentMarkdownModule {\n\n}\n","import { Injectable, Sanitizer, SecurityContext } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { isGithubHref, rawGithubHref } from './markdown-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MarkdownLoaderService {\n  constructor(private _http: HttpClient, private _sanitizer: Sanitizer) {}\n\n  async load(url: string, httpOptions: object = {}): Promise<string> {\n    const sanitizedUrl: string = this._sanitizer.sanitize(SecurityContext.URL, url);\n    let urlToGet: string = sanitizedUrl;\n    if (isGithubHref(sanitizedUrl)) {\n      urlToGet = rawGithubHref(sanitizedUrl);\n    }\n\n    const response: HttpResponse<string> = await this._http\n      .get(urlToGet, { ...httpOptions, responseType: 'text', observe: 'response' })\n      .toPromise();\n    const contentType: string = response.headers.get('Content-Type');\n    if (contentType.includes('text/plain') || contentType.includes('text/markdown')) {\n      return response.body;\n    } else {\n      throw Error(`${contentType} is not a handled content type`);\n    }\n  }\n}\n"],"names":[],"mappings":"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"}
