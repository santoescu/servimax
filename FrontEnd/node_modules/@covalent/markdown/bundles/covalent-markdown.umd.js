(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/platform-browser'), require('@angular/core'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('@covalent/markdown', ['exports', '@angular/common', '@angular/platform-browser', '@angular/core', '@angular/common/http'], factory) :
    (factory((global.covalent = global.covalent || {}, global.covalent.markdown = {}),global.ng.common,global.ng.platformBrowser,global.ng.core,global.ng.common.http));
}(this, (function (exports,common,platformBrowser,i0,i1) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /**
     * @param {?} str
     * @return {?}
     */
    function removeLeadingHash(str) {
        if (str) {
            return str.replace(/^#+/, '');
        }
        return undefined;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function removeTrailingHash(str) {
        if (str) {
            return str.replace(/\#.*/, '');
        }
        return undefined;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function normalizeAnchor(str) {
        if (str) {
            return removeLeadingHash(str.replace(/(_|-|\s)+/g, '')).toLowerCase();
        }
        return undefined;
    }
    /**
     * @param {?} element
     * @param {?} anchor
     * @return {?}
     */
    function scrollToAnchor(element, anchor) {
        if (element && anchor) {
            /** @type {?} */
            var normalizedAnchor = normalizeAnchor(anchor);
            /** @type {?} */
            var parent_1 = element.parentElement;
            /** @type {?} */
            var headingToJumpTo = void 0;
            /** @type {?} */
            var headingWithinComponent = element.querySelector("[id=\"" + normalizedAnchor + "\"]");
            if (headingWithinComponent) {
                headingToJumpTo = headingWithinComponent;
            }
            else if (parent_1) {
                headingToJumpTo = parent_1.querySelector("[id=\"" + normalizedAnchor + "\"]");
            }
            if (headingToJumpTo) {
                headingToJumpTo.scrollIntoView({ behavior: 'auto' });
            }
            else {
                // TODO: leave this warning?
                // tslint:disable-next-line
                console.warn("Could not jump to heading '" + anchor + "'");
            }
        }
    }
    /**
     * @param {?} anchor
     * @return {?}
     */
    function isAnchorLink(anchor) {
        if (anchor) {
            return anchor.getAttribute('href').startsWith('#');
        }
    }
    /**
     * @param {?} githubHref
     * @return {?}
     */
    function rawGithubHref(githubHref) {
        if (githubHref) {
            /** @type {?} */
            var url = new URL(githubHref);
            if (url.pathname.startsWith('/raw/')) {
                return githubHref;
            }
            else {
                url.hostname = 'raw.githubusercontent.com';
                url.pathname = url.pathname.split('/blob', 2).join('');
                return url.href;
            }
        }
        return undefined;
    }
    /**
     * @param {?} href
     * @return {?}
     */
    function isGithubHref(href) {
        try {
            /** @type {?} */
            var temp = new URL(href);
            return temp.hostname === 'github.com';
        }
        catch (_a) {
            return false;
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /* tslint:disable-next-line */
    /** @type {?} */
    var showdown = require('showdown/dist/showdown.js');
    // TODO: assumes it is a github url
    // allow override somehow
    /**
     * @param {?} currentHref
     * @param {?} relativeHref
     * @return {?}
     */
    function generateAbsoluteHref(currentHref, relativeHref) {
        if (currentHref && relativeHref) {
            /** @type {?} */
            var currentUrl = new URL(currentHref);
            /** @type {?} */
            var path = currentUrl.pathname
                .split('/')
                .slice(1, -1)
                .join('/');
            /** @type {?} */
            var correctUrl = new URL(currentHref);
            if (relativeHref.startsWith('/')) {
                // url is relative to top level
                /** @type {?} */
                var orgAndRepo = path
                    .split('/')
                    .slice(0, 3)
                    .join('/');
                correctUrl.pathname = "" + orgAndRepo + relativeHref;
            }
            else {
                correctUrl.pathname = path + "/" + relativeHref;
            }
            return correctUrl.href;
        }
        return undefined;
    }
    /**
     * @param {?} html
     * @param {?} currentHref
     * @return {?}
     */
    function normalizeHtmlHrefs(html, currentHref) {
        if (currentHref) {
            /** @type {?} */
            var document_1 = new DOMParser().parseFromString(html, 'text/html');
            document_1.querySelectorAll('a[href]').forEach(function (link) {
                /** @type {?} */
                var url = new URL(link.href);
                /** @type {?} */
                var originalHash = url.hash;
                if (isAnchorLink(link)) {
                    if (originalHash) {
                        url.hash = normalizeAnchor(originalHash);
                        link.href = url.hash;
                    }
                }
                else if (url.host === window.location.host) {
                    // hosts match, meaning URL MIGHT have been malformed by showdown
                    // url is a relative url or just a link to a part of the application
                    if (url.pathname.endsWith('.md')) {
                        // only check .md urls
                        /** @type {?} */
                        var hrefWithoutHash = removeTrailingHash(link.getAttribute('href'));
                        url.href = generateAbsoluteHref(currentHref, hrefWithoutHash);
                        if (originalHash) {
                            url.hash = normalizeAnchor(originalHash);
                        }
                        link.href = url.href;
                    }
                    link.target = '_blank';
                }
                else {
                    // url is absolute
                    if (url.pathname.endsWith('.md')) {
                        if (originalHash) {
                            url.hash = normalizeAnchor(originalHash);
                        }
                        link.href = url.href;
                    }
                    link.target = '_blank';
                }
            });
            return new XMLSerializer().serializeToString(document_1);
        }
        return html;
    }
    /**
     * @param {?} html
     * @param {?} currentHref
     * @return {?}
     */
    function normalizeImageSrcs(html, currentHref) {
        if (currentHref) {
            /** @type {?} */
            var document_2 = new DOMParser().parseFromString(html, 'text/html');
            document_2.querySelectorAll('img[src]').forEach(function (image) {
                /** @type {?} */
                var src = image.getAttribute('src');
                try {
                    /* tslint:disable-next-line:no-unused-expression */
                    new URL(src);
                    if (isGithubHref(src)) {
                        image.src = rawGithubHref(src);
                    }
                }
                catch (_a) {
                    image.src = generateAbsoluteHref(isGithubHref(currentHref) ? rawGithubHref(currentHref) : currentHref, src);
                }
            });
            return new XMLSerializer().serializeToString(document_2);
        }
        return html;
    }
    /**
     * @param {?} html
     * @return {?}
     */
    function addIdsToHeadings(html) {
        if (html) {
            /** @type {?} */
            var document_3 = new DOMParser().parseFromString(html, 'text/html');
            document_3.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(function (heading) {
                /** @type {?} */
                var id = normalizeAnchor(heading.innerHTML);
                heading.setAttribute('id', id);
            });
            return new XMLSerializer().serializeToString(document_3);
        }
        return html;
    }
    var TdMarkdownComponent = /** @class */ (function () {
        function TdMarkdownComponent(_renderer, _elementRef, _domSanitizer) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this._domSanitizer = _domSanitizer;
            this._simpleLineBreaks = false;
            this._viewInit = false;
            /**
             * .td-markdown class added to host so ::ng-deep gets scoped.
             */
            this.class = 'td-markdown';
            /**
             * contentReady?: function
             * Event emitted after the markdown content rendering is finished.
             */
            this.onContentReady = new i0.EventEmitter();
        }
        Object.defineProperty(TdMarkdownComponent.prototype, "content", {
            /**
             * content?: string
             *
             * Markdown format content to be parsed as html markup.
             *
             * e.g. README.md content.
             */
            set: /**
             * content?: string
             *
             * Markdown format content to be parsed as html markup.
             *
             * e.g. README.md content.
             * @param {?} content
             * @return {?}
             */ function (content) {
                this._content = content;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TdMarkdownComponent.prototype, "simpleLineBreaks", {
            /**
             * simpleLineBreaks?: string
             *
             * Sets whether newline characters inside paragraphs and spans are parsed as <br/>.
             * Defaults to false.
             */
            set: /**
             * simpleLineBreaks?: string
             *
             * Sets whether newline characters inside paragraphs and spans are parsed as <br/>.
             * Defaults to false.
             * @param {?} simpleLineBreaks
             * @return {?}
             */ function (simpleLineBreaks) {
                this._simpleLineBreaks = simpleLineBreaks;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TdMarkdownComponent.prototype, "hostedUrl", {
            /**
             * hostedUrl?: string
             *
             * If markdown contains relative paths, this is required to generate correct urls.
             *
             */
            set: /**
             * hostedUrl?: string
             *
             * If markdown contains relative paths, this is required to generate correct urls.
             *
             * @param {?} hostedUrl
             * @return {?}
             */ function (hostedUrl) {
                this._hostedUrl = hostedUrl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TdMarkdownComponent.prototype, "anchor", {
            /**
             * anchor?: string
             *
             * Anchor to jump to.
             *
             */
            set: /**
             * anchor?: string
             *
             * Anchor to jump to.
             *
             * @param {?} anchor
             * @return {?}
             */ function (anchor) {
                this._anchor = anchor;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        TdMarkdownComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                // only anchor changed
                if (changes.anchor && !changes.content && !changes.simpleLineBreaks && !changes.hostedUrl) {
                    scrollToAnchor(this._elementRef.nativeElement, this._anchor);
                }
                else {
                    this.refresh();
                }
            };
        /**
         * @return {?}
         */
        TdMarkdownComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (!this._content) {
                    this._loadContent((( /** @type {?} */(this._elementRef.nativeElement))).textContent);
                }
                this._viewInit = true;
            };
        /**
         * @return {?}
         */
        TdMarkdownComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.removeAnchorListeners();
            };
        /**
         * @return {?}
         */
        TdMarkdownComponent.prototype.refresh = /**
         * @return {?}
         */
            function () {
                if (this._content) {
                    this._loadContent(this._content);
                }
                else if (this._viewInit) {
                    this._loadContent((( /** @type {?} */(this._elementRef.nativeElement))).textContent);
                }
            };
        /**
         * General method to parse a string markdown into HTML Elements and load them into the container
         */
        /**
         * General method to parse a string markdown into HTML Elements and load them into the container
         * @param {?} markdown
         * @return {?}
         */
        TdMarkdownComponent.prototype._loadContent = /**
         * General method to parse a string markdown into HTML Elements and load them into the container
         * @param {?} markdown
         * @return {?}
         */
            function (markdown) {
                var _this = this;
                if (markdown && markdown.trim().length > 0) {
                    // Clean container
                    this._renderer.setProperty(this._elementRef.nativeElement, 'innerHTML', '');
                    // Parse html string into actual HTML elements.
                    /** @type {?} */
                    var divElement = this._elementFromString(this._render(markdown));
                }
                this.removeAnchorListeners();
                this.handleAnchorClicksBound = this.handleAnchorClicks.bind(this);
                this.attachAnchorListeners();
                // TODO: timeout required since resizing of html elements occurs which causes a change in the scroll position
                setTimeout(function () { return scrollToAnchor(_this._elementRef.nativeElement, _this._anchor); }, 250);
                this.onContentReady.emit();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        TdMarkdownComponent.prototype.handleAnchorClicks = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                return __awaiter(this, void 0, void 0, function () {
                    var url, hash;
                    return __generator(this, function (_a) {
                        event.preventDefault();
                        url = new URL((( /** @type {?} */(event.target))).href);
                        hash = decodeURI(url.hash);
                        scrollToAnchor(this._elementRef.nativeElement, hash);
                        return [2 /*return*/];
                    });
                });
            };
        /**
         * @return {?}
         */
        TdMarkdownComponent.prototype.attachAnchorListeners = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // TODO: rxjs fromEvent
                Array.from(this._elementRef.nativeElement.querySelectorAll('a[href]'))
                    .filter(function (link) { return isAnchorLink(link); })
                    .forEach(function (link) { return link.addEventListener('click', _this.handleAnchorClicksBound); });
            };
        /**
         * @return {?}
         */
        TdMarkdownComponent.prototype.removeAnchorListeners = /**
         * @return {?}
         */
            function () {
                var _this = this;
                Array.from(this._elementRef.nativeElement.querySelectorAll('a[href]'))
                    .filter(function (link) { return isAnchorLink(link); })
                    .forEach(function (link) { return link.removeEventListener('click', _this.handleAnchorClicksBound); });
            };
        /**
         * @param {?} markupStr
         * @return {?}
         */
        TdMarkdownComponent.prototype._elementFromString = /**
         * @param {?} markupStr
         * @return {?}
         */
            function (markupStr) {
                // Renderer2 doesnt have a parsing method, so we have to sanitize and use [innerHTML]
                // to parse the string into DOM element for now.
                /** @type {?} */
                var div = this._renderer.createElement('div');
                this._renderer.appendChild(this._elementRef.nativeElement, div);
                /** @type {?} */
                var html = this._domSanitizer.sanitize(i0.SecurityContext.HTML, markupStr);
                /** @type {?} */
                var htmlWithAbsoluteHrefs = normalizeHtmlHrefs(html, this._hostedUrl);
                /** @type {?} */
                var htmlWithAbsoluteImgSrcs = normalizeImageSrcs(htmlWithAbsoluteHrefs, this._hostedUrl);
                /** @type {?} */
                var htmlWithHeadingIds = addIdsToHeadings(htmlWithAbsoluteImgSrcs);
                div.innerHTML = htmlWithHeadingIds;
                return div;
            };
        /**
         * @param {?} markdown
         * @return {?}
         */
        TdMarkdownComponent.prototype._render = /**
         * @param {?} markdown
         * @return {?}
         */
            function (markdown) {
                // Trim leading and trailing newlines
                markdown = markdown.replace(/^(\s|\t)*\n+/g, '').replace(/(\s|\t)*\n+(\s|\t)*$/g, '');
                // Split markdown by line characters
                /** @type {?} */
                var lines = markdown.split('\n');
                // check how much indentation is used by the first actual markdown line
                /** @type {?} */
                var firstLineWhitespace = lines[0].match(/^(\s|\t)*/)[0];
                // Remove all indentation spaces so markdown can be parsed correctly
                /** @type {?} */
                var startingWhitespaceRegex = new RegExp('^' + firstLineWhitespace);
                lines = lines.map(function (line) {
                    return line.replace(startingWhitespaceRegex, '');
                });
                // Join lines again with line characters
                /** @type {?} */
                var markdownToParse = lines.join('\n');
                // Convert markdown into html
                /** @type {?} */
                var converter = new showdown.Converter();
                converter.setOption('ghCodeBlocks', true);
                converter.setOption('tasklists', true);
                converter.setOption('tables', true);
                converter.setOption('simpleLineBreaks', this._simpleLineBreaks);
                /** @type {?} */
                var html = converter.makeHtml(markdownToParse);
                return html;
            };
        TdMarkdownComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'td-markdown',
                        template: "<ng-content></ng-content>",
                        styles: [":host.td-markdown::ng-deep a{background-color:transparent;-webkit-text-decoration-skip:objects;text-decoration:none}:host.td-markdown::ng-deep a:active,:host.td-markdown::ng-deep a:hover{outline-width:0;text-decoration:underline}:host.td-markdown::ng-deep strong{font-weight:bolder}:host.td-markdown::ng-deep h1{margin:.67em 0}:host.td-markdown::ng-deep img{border-style:none}:host.td-markdown::ng-deep svg:not(:root){overflow:hidden}:host.td-markdown::ng-deep code,:host.td-markdown::ng-deep kbd,:host.td-markdown::ng-deep pre{font-family:monospace,monospace;font-size:1em}:host.td-markdown::ng-deep hr{-webkit-box-sizing:content-box;box-sizing:content-box}:host.td-markdown::ng-deep input{margin:0;overflow:visible;font:13px/1.4 Helvetica,arial,nimbussansl,liberationsans,freesans,clean,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\"}:host.td-markdown::ng-deep [type=button]:-moz-focusring,:host.td-markdown::ng-deep [type=reset]:-moz-focusring,:host.td-markdown::ng-deep [type=submit]:-moz-focusring,:host.td-markdown::ng-deep button:-moz-focusring{outline:ButtonText dotted 1px}:host.td-markdown::ng-deep [type=checkbox]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}:host.td-markdown::ng-deep td,:host.td-markdown::ng-deep th{padding:0}:host.td-markdown::ng-deep *{-webkit-box-sizing:border-box;box-sizing:border-box}:host.td-markdown::ng-deep hr::before{display:table;content:\"\"}:host.td-markdown::ng-deep hr::after{display:table;clear:both;content:\"\"}:host.td-markdown::ng-deep p{margin-top:0;margin-bottom:10px}:host.td-markdown::ng-deep blockquote{margin:0}:host.td-markdown::ng-deep ol,:host.td-markdown::ng-deep ul{margin-top:0;margin-bottom:0;padding-left:2em}:host.td-markdown::ng-deep ol ol,:host.td-markdown::ng-deep ul ol{list-style-type:lower-roman}:host.td-markdown::ng-deep ol ol ol,:host.td-markdown::ng-deep ol ul ol,:host.td-markdown::ng-deep ul ol ol,:host.td-markdown::ng-deep ul ul ol{list-style-type:lower-alpha}:host.td-markdown::ng-deep dd{margin-left:0}:host.td-markdown::ng-deep code{font-family:Consolas,\"Liberation Mono\",Menlo,Courier,monospace}:host.td-markdown::ng-deep pre{margin-top:0;margin-bottom:0;font:12px Consolas,\"Liberation Mono\",Menlo,Courier,monospace;word-wrap:normal}:host.td-markdown::ng-deep .pl-0{padding-left:0!important}:host.td-markdown::ng-deep .pl-1{padding-left:3px!important}:host.td-markdown::ng-deep .pl-2{padding-left:6px!important}:host.td-markdown::ng-deep .pl-3{padding-left:12px!important}:host.td-markdown::ng-deep .pl-4{padding-left:24px!important}:host.td-markdown::ng-deep .pl-5{padding-left:36px!important}:host.td-markdown::ng-deep .pl-6{padding-left:48px!important}:host.td-markdown::ng-deep .form-select::-ms-expand{opacity:0}:host.td-markdown::ng-deep a:not([href]){color:inherit;text-decoration:none}:host.td-markdown::ng-deep h1,:host.td-markdown::ng-deep h2,:host.td-markdown::ng-deep h3,:host.td-markdown::ng-deep h4,:host.td-markdown::ng-deep h5,:host.td-markdown::ng-deep h6{margin-top:1em;margin-bottom:16px;font-weight:700;line-height:1.4}:host.td-markdown::ng-deep h1 .octicon-link,:host.td-markdown::ng-deep h2 .octicon-link,:host.td-markdown::ng-deep h3 .octicon-link,:host.td-markdown::ng-deep h4 .octicon-link,:host.td-markdown::ng-deep h5 .octicon-link,:host.td-markdown::ng-deep h6 .octicon-link{color:#000;vertical-align:middle;visibility:hidden}:host.td-markdown::ng-deep h1:hover .anchor,:host.td-markdown::ng-deep h2:hover .anchor,:host.td-markdown::ng-deep h3:hover .anchor,:host.td-markdown::ng-deep h4:hover .anchor,:host.td-markdown::ng-deep h5:hover .anchor,:host.td-markdown::ng-deep h6:hover .anchor{text-decoration:none}:host.td-markdown::ng-deep h1:hover .anchor .octicon-link,:host.td-markdown::ng-deep h2:hover .anchor .octicon-link,:host.td-markdown::ng-deep h3:hover .anchor .octicon-link,:host.td-markdown::ng-deep h4:hover .anchor .octicon-link,:host.td-markdown::ng-deep h5:hover .anchor .octicon-link,:host.td-markdown::ng-deep h6:hover .anchor .octicon-link{visibility:visible}:host.td-markdown::ng-deep h1{padding-bottom:.3em;font-size:2.25em;line-height:1.2;border-bottom-width:1px;border-bottom-style:solid}:host.td-markdown::ng-deep h1 .anchor{line-height:1}:host.td-markdown::ng-deep h2{padding-bottom:.3em;font-size:1.75em;line-height:1.225;border-bottom-width:1px;border-bottom-style:solid}:host.td-markdown::ng-deep h2 .anchor{line-height:1}:host.td-markdown::ng-deep h3{font-size:1.5em;line-height:1.43}:host.td-markdown::ng-deep h3 .anchor{line-height:1.2}:host.td-markdown::ng-deep h4{font-size:1.25em}:host.td-markdown::ng-deep h4 .anchor{line-height:1.2}:host.td-markdown::ng-deep h5{font-size:1em}:host.td-markdown::ng-deep h5 .anchor{line-height:1.1}:host.td-markdown::ng-deep h6{font-size:1em}:host.td-markdown::ng-deep h6 .anchor{line-height:1.1}:host.td-markdown::ng-deep blockquote,:host.td-markdown::ng-deep dl,:host.td-markdown::ng-deep ol,:host.td-markdown::ng-deep p,:host.td-markdown::ng-deep pre,:host.td-markdown::ng-deep table,:host.td-markdown::ng-deep ul{margin-top:0;margin-bottom:16px}:host.td-markdown::ng-deep hr{height:0;overflow:hidden;background:0 0;border-bottom-width:1px;border-bottom-style:solid;margin:16px 0}:host.td-markdown::ng-deep ol ol,:host.td-markdown::ng-deep ol ul,:host.td-markdown::ng-deep ul ol,:host.td-markdown::ng-deep ul ul{margin-top:0;margin-bottom:0}:host.td-markdown::ng-deep li>p{margin-top:16px}:host.td-markdown::ng-deep dl{padding:0}:host.td-markdown::ng-deep dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic;font-weight:700}:host.td-markdown::ng-deep dl dd{padding:0 16px;margin-bottom:16px}:host.td-markdown::ng-deep blockquote{padding:0 15px;border-left-width:4px;border-left-style:solid}:host.td-markdown::ng-deep blockquote>:first-child{margin-top:0}:host.td-markdown::ng-deep blockquote>:last-child{margin-bottom:0}:host.td-markdown::ng-deep table{border-spacing:0;border-collapse:collapse;display:block;width:100%;overflow:auto;word-break:normal;word-break:keep-all}:host.td-markdown::ng-deep table th{font-weight:700}:host.td-markdown::ng-deep table td,:host.td-markdown::ng-deep table th{padding:6px 13px;border-width:1px;border-style:solid}:host.td-markdown::ng-deep table tr{border-top-width:1px;border-top-style:solid}:host.td-markdown::ng-deep img{max-width:100%;-webkit-box-sizing:content-box;box-sizing:content-box}:host.td-markdown::ng-deep code{padding:.2em 0;margin:0;font-size:85%;border-radius:3px}:host.td-markdown::ng-deep code:after,:host.td-markdown::ng-deep code:before{letter-spacing:-.2em}:host.td-markdown::ng-deep pre>code{padding:0;margin:0;font-size:100%;word-break:normal;white-space:pre;background:0 0;border:0}:host.td-markdown::ng-deep .highlight{margin-bottom:16px}:host.td-markdown::ng-deep .highlight pre,:host.td-markdown::ng-deep pre{padding:16px;overflow:auto;font-size:85%;line-height:1.45;border-radius:3px}:host.td-markdown::ng-deep .highlight pre{margin-bottom:0;word-break:normal}:host.td-markdown::ng-deep pre code{display:inline;max-width:initial;padding:0;margin:0;overflow:initial;line-height:inherit;word-wrap:normal;background-color:transparent;border:0}:host.td-markdown::ng-deep pre code:after,:host.td-markdown::ng-deep pre code:before{content:normal}:host.td-markdown::ng-deep .pl-c{color:#969896}:host.td-markdown::ng-deep .pl-c1,:host.td-markdown::ng-deep .pl-s .pl-v{color:#0086b3}:host.td-markdown::ng-deep .pl-e,:host.td-markdown::ng-deep .pl-en{color:#795da3}:host.td-markdown::ng-deep .pl-s .pl-s1,:host.td-markdown::ng-deep .pl-smi{color:#333}:host.td-markdown::ng-deep .pl-ent{color:#63a35c}:host.td-markdown::ng-deep .pl-k{color:#a71d5d}:host.td-markdown::ng-deep .pl-pds,:host.td-markdown::ng-deep .pl-s,:host.td-markdown::ng-deep .pl-s .pl-pse .pl-s1,:host.td-markdown::ng-deep .pl-sr,:host.td-markdown::ng-deep .pl-sr .pl-cce,:host.td-markdown::ng-deep .pl-sr .pl-sra,:host.td-markdown::ng-deep .pl-sr .pl-sre{color:#183691}:host.td-markdown::ng-deep .pl-v{color:#ed6a43}:host.td-markdown::ng-deep .pl-id{color:#b52a1d}:host.td-markdown::ng-deep .pl-ii{background-color:#b52a1d;color:#f8f8f8}:host.td-markdown::ng-deep .pl-sr .pl-cce{color:#63a35c;font-weight:700}:host.td-markdown::ng-deep .pl-ml{color:#693a17}:host.td-markdown::ng-deep .pl-mh,:host.td-markdown::ng-deep .pl-mh .pl-en,:host.td-markdown::ng-deep .pl-ms{color:#1d3e81;font-weight:700}:host.td-markdown::ng-deep .pl-mq{color:teal}:host.td-markdown::ng-deep .pl-mi{color:#333;font-style:italic}:host.td-markdown::ng-deep .pl-mb{color:#333;font-weight:700}:host.td-markdown::ng-deep .pl-md{background-color:#ffecec;color:#bd2c00}:host.td-markdown::ng-deep .pl-mi1{background-color:#eaffea;color:#55a532}:host.td-markdown::ng-deep .pl-mdr{color:#795da3;font-weight:700}:host.td-markdown::ng-deep .pl-mo{color:#1d3e81}:host.td-markdown::ng-deep kbd{display:inline-block;padding:3px 5px;font:11px/10px Consolas,\"Liberation Mono\",Menlo,Courier,monospace;vertical-align:middle;background-color:#fcfcfc;border:1px solid #ccc;border-bottom-color:#bbb;border-radius:3px;-webkit-box-shadow:inset 0 -1px 0 #bbb;box-shadow:inset 0 -1px 0 #bbb}:host.td-markdown::ng-deep .full-commit .btn-outline:not(:disabled):hover{color:#4078c0;border:1px solid #4078c0}:host.td-markdown::ng-deep :checked+.radio-label{position:relative;z-index:1;border-color:#4078c0}:host.td-markdown::ng-deep .octicon{display:inline-block;vertical-align:text-top;fill:currentColor}:host.td-markdown::ng-deep .task-list-item{list-style-type:none}:host.td-markdown::ng-deep .task-list-item+.task-list-item{margin-top:3px}:host.td-markdown::ng-deep .task-list-item input{margin:0 .2em .25em -1.6em;vertical-align:middle}"]
                    }] }
        ];
        /** @nocollapse */
        TdMarkdownComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: i0.ElementRef },
                { type: platformBrowser.DomSanitizer }
            ];
        };
        TdMarkdownComponent.propDecorators = {
            class: [{ type: i0.HostBinding, args: ['class',] }],
            content: [{ type: i0.Input, args: ['content',] }],
            simpleLineBreaks: [{ type: i0.Input, args: ['simpleLineBreaks',] }],
            hostedUrl: [{ type: i0.Input, args: ['hostedUrl',] }],
            anchor: [{ type: i0.Input, args: ['anchor',] }],
            onContentReady: [{ type: i0.Output, args: ['contentReady',] }]
        };
        return TdMarkdownComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var CovalentMarkdownModule = /** @class */ (function () {
        function CovalentMarkdownModule() {
        }
        CovalentMarkdownModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                        ],
                        declarations: [
                            TdMarkdownComponent,
                        ],
                        exports: [
                            TdMarkdownComponent,
                        ],
                    },] }
        ];
        return CovalentMarkdownModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var MarkdownLoaderService = /** @class */ (function () {
        function MarkdownLoaderService(_http, _sanitizer) {
            this._http = _http;
            this._sanitizer = _sanitizer;
        }
        /**
         * @param {?} url
         * @param {?=} httpOptions
         * @return {?}
         */
        MarkdownLoaderService.prototype.load = /**
         * @param {?} url
         * @param {?=} httpOptions
         * @return {?}
         */
            function (url, httpOptions) {
                if (httpOptions === void 0) {
                    httpOptions = {};
                }
                return __awaiter(this, void 0, void 0, function () {
                    var sanitizedUrl, urlToGet, response, contentType;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                sanitizedUrl = this._sanitizer.sanitize(i0.SecurityContext.URL, url);
                                urlToGet = sanitizedUrl;
                                if (isGithubHref(sanitizedUrl)) {
                                    urlToGet = rawGithubHref(sanitizedUrl);
                                }
                                return [4 /*yield*/, this._http
                                        .get(urlToGet, __assign({}, httpOptions, { responseType: 'text', observe: 'response' }))
                                        .toPromise()];
                            case 1:
                                response = _a.sent();
                                contentType = response.headers.get('Content-Type');
                                if (contentType.includes('text/plain') || contentType.includes('text/markdown')) {
                                    return [2 /*return*/, response.body];
                                }
                                else {
                                    throw Error(contentType + " is not a handled content type");
                                }
                                return [2 /*return*/];
                        }
                    });
                });
            };
        MarkdownLoaderService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        MarkdownLoaderService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: i0.Sanitizer }
            ];
        };
        /** @nocollapse */ MarkdownLoaderService.ngInjectableDef = i0.defineInjectable({ factory: function MarkdownLoaderService_Factory() { return new MarkdownLoaderService(i0.inject(i1.HttpClient), i0.inject(i0.Sanitizer)); }, token: MarkdownLoaderService, providedIn: "root" });
        return MarkdownLoaderService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.CovalentMarkdownModule = CovalentMarkdownModule;
    exports.TdMarkdownComponent = TdMarkdownComponent;
    exports.removeLeadingHash = removeLeadingHash;
    exports.removeTrailingHash = removeTrailingHash;
    exports.normalizeAnchor = normalizeAnchor;
    exports.scrollToAnchor = scrollToAnchor;
    exports.isAnchorLink = isAnchorLink;
    exports.rawGithubHref = rawGithubHref;
    exports.isGithubHref = isGithubHref;
    exports.MarkdownLoaderService = MarkdownLoaderService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=covalent-markdown.umd.js.map