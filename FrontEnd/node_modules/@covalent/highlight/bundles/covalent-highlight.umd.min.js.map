{"version":3,"sources":["ng://@covalent/highlight/highlight.component.ts","ng://@covalent/highlight/highlight.module.ts"],"names":["hljs","require","TdHighlightComponent","Object","defineProperty","prototype","content","this","_content","_initialized","_loadContent","ngAfterViewInit","language","Error","_elementRef","textContent","code","trim","length","_renderer","setProperty","nativeElement","_elementFromString","_render","onContentReady","emit","codeStr","preElement","createElement","appendChild","codeElement","addClass","innerHTML","_domSanitizer","sanitize","SecurityContext","HTML","contents","lines","replace","split","firstLineWhitespace","match","startingWhitespaceRegex","RegExp","codeToParse","map","line","join","highlightedCode","highlight","value","Component","args","selector","template","Renderer2","ElementRef","DomSanitizer","Input","Output","EventEmitter","CovalentHighlightModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"mcAKIA,EAAYC,QAAQ,oBAExBC,GAmBEC,OAAAC,eACIF,EAAAG,UAAA,UAAO,KADX,SACYC,GACVC,KAAKC,SAAWF,EACZC,KAAKE,cACPF,KAAKG,aAAaH,KAAKC,2CAwB3BN,EAAAG,UAAAM,gBAAA,WACE,IAAKJ,KAAKK,SACR,MAAM,IAAIC,MAAM,sEAEbN,KAAKC,SAGRD,KAAKG,aAAaH,KAAKC,UAFvBD,KAAKG,aAA2BH,KAAKO,YAAyB,cAAEC,aAIlER,KAAKE,cAAe,GAKdP,EAAAG,UAAAK,aAAR,SAAqBM,GACfA,GAA6B,EAArBA,EAAKC,OAAOC,SAEtBX,KAAKY,UAAUC,YAAYb,KAAKO,YAAYO,cAAe,YAAa,IAEvCd,KAAKe,mBAAmBf,KAAKgB,QAAQP,KAExET,KAAKiB,eAAeC,QAGdvB,EAAAG,UAAAiB,mBAAR,SAA2BI,OAGnBC,EAA6BpB,KAAKY,UAAUS,cAAc,OAChErB,KAAKY,UAAUU,YAAYtB,KAAKO,YAAYO,cAAeM,OACrDG,EAA2BvB,KAAKY,UAAUS,cAAc,QAK9D,OAJArB,KAAKY,UAAUU,YAAYF,EAAYG,GAEvCvB,KAAKY,UAAUY,SAASD,EAAa,aACrCA,EAAYE,UAAYzB,KAAK0B,cAAcC,SAASC,EAAAA,gBAAgBC,KAAMV,GACnEC,GAGDzB,EAAAG,UAAAkB,QAAR,SAAgBc,OAKVC,GAHJD,EAAWA,EAASE,QAAQ,gBAAiB,IACzBA,QAAQ,wBAAyB,KAEtBC,MAAM,MAGjCC,EAA8BH,EAAM,GAAGI,MAAM,aAAa,GAG1DC,EAAkC,IAAIC,OAAO,IAAMH,GAQnDI,GAPJP,EAAQA,EAAMQ,IAAI,SAASC,GACzB,OAAOA,EACJR,QAAQ,MAAO,IACfA,QAAQI,EAAyB,IACjCJ,QAAQ,OAAQ,OAGYS,KAAK,MACrCT,QAAQ,UAAW,MAAMA,QAAQ,UAAW,MAC5CA,QAAQ,SAAU,KAAKA,QAAQ,SAAU,KAGtCU,EAAuBjD,EAAKkD,UAAU3C,KAAKK,SAAUiC,GAAa,GAKtE,OAJAI,EAAgBE,MAAQF,EAAgBE,MACrCZ,QAAQ,yCAA0C,IAClDA,QAAQ,SAAU,IAClBA,QAAQ,UAAW,IACfU,EAAgBE,2BAjH1BC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,eAEVC,SAAA,iyBAV0EC,EAAAA,iBAAzCC,EAAAA,kBAC1BC,EAAAA,iDAyBNC,EAAAA,MAAKN,KAAA,CAAC,6BAgBNM,EAAAA,MAAKN,KAAA,CAAC,gCAMNO,EAAAA,OAAMP,KAAA,CAAC,mBA0EVnD,GAxEE,SAAAA,EAAoBiB,EACAL,EACAmB,GAFA1B,KAAAY,UAAAA,EACAZ,KAAAO,YAAAA,EACAP,KAAA0B,cAAAA,EAtCZ1B,KAAAE,cAAwB,EA4BjBF,KAAAK,SAAmB,aAMVL,KAAAiB,eAAqC,IAAIqC,EAAAA,aChDnE,IAAAC,uBAKCC,EAAAA,SAAQV,KAAA,CAAC,CACRW,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZhE,GAEFiE,QAAS,CACPjE,OAKJ4D,GAbA,SAAAA","sourcesContent":["import { Component, AfterViewInit, ElementRef, Input, Output, EventEmitter, Renderer2, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\ndeclare const require: any;\n/* tslint:disable-next-line */\nlet hljs: any = require('highlight.js/lib');\n\n@Component({\n  selector: 'td-highlight',\n  styleUrls: ['./highlight.component.scss'],\n  templateUrl: './highlight.component.html',\n})\nexport class TdHighlightComponent implements AfterViewInit {\n\n  private _initialized: boolean = false;\n\n  private _content: string;\n\n  /**\n   * content?: string\n   *\n   * Code content to be parsed as highlighted html.\n   * Used to load data dynamically.\n   *\n   * e.g. `.html`, `.ts` , etc.\n   */\n  @Input('content')\n  set content(content: string) {\n    this._content = content;\n    if (this._initialized) {\n      this._loadContent(this._content);\n    }\n  }\n\n  /**\n   * lang?: string\n   *\n   * Language of the code content to be parsed as highlighted html.\n   * Defaults to `typescript`\n   *\n   * e.g. `typescript`, `html` , etc.\n   */\n  @Input('lang') language: string = 'typescript';\n\n  /**\n   * contentReady?: function\n   * Event emitted after the highlight content rendering is finished.\n   */\n  @Output('contentReady') onContentReady: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor(private _renderer: Renderer2,\n              private _elementRef: ElementRef,\n              private _domSanitizer: DomSanitizer) {}\n\n  ngAfterViewInit(): void {\n    if (!this.language) {\n      throw new Error('Error: language attribute must be defined in TdHighlightComponent.');\n    }\n    if (!this._content) {\n      this._loadContent((<HTMLElement>this._elementRef.nativeElement).textContent);\n    } else {\n      this._loadContent(this._content);\n    }\n    this._initialized = true;\n  }\n  /**\n   * General method to parse a string of code into HTML Elements and load them into the container\n   */\n  private _loadContent(code: string): void {\n    if (code && code.trim().length > 0) {\n      // Clean container\n      this._renderer.setProperty(this._elementRef.nativeElement, 'innerHTML', '');\n      // Parse html string into actual HTML elements.\n      let preElement: HTMLPreElement = this._elementFromString(this._render(code));\n    }\n    this.onContentReady.emit();\n  }\n\n  private _elementFromString(codeStr: string): HTMLPreElement {\n    // Renderer2 doesnt have a parsing method, so we have to sanitize and use [innerHTML]\n    // to parse the string into DOM element for now.\n    const preElement: HTMLPreElement = this._renderer.createElement('pre');\n    this._renderer.appendChild(this._elementRef.nativeElement, preElement);\n    const codeElement: HTMLElement = this._renderer.createElement('code');\n    this._renderer.appendChild(preElement, codeElement);\n    // Set .highlight class into <code> element\n    this._renderer.addClass(codeElement, 'highlight');\n    codeElement.innerHTML = this._domSanitizer.sanitize(SecurityContext.HTML, codeStr);\n    return preElement;\n  }\n\n  private _render(contents: string): string {\n    // Trim leading and trailing newlines\n    contents = contents.replace(/^(\\s|\\t)*\\n+/g, '')\n                       .replace(/(\\s|\\t)*\\n+(\\s|\\t)*$/g, '');\n    // Split markup by line characters\n    let lines: string[] = contents.split('\\n');\n\n    // check how much indentation is used by the first actual code line\n    let firstLineWhitespace: string = lines[0].match(/^(\\s|\\t)*/)[0];\n\n    // Remove all indentation spaces so code can be parsed correctly\n    let startingWhitespaceRegex: RegExp = new RegExp('^' + firstLineWhitespace);\n    lines = lines.map(function(line: string): string {\n      return line\n        .replace('=\"\"', '') // remove empty values\n        .replace(startingWhitespaceRegex, '')\n        .replace(/\\s+$/, ''); // remove trailing white spaces\n    });\n\n    let codeToParse: string =  lines.join('\\n')\n    .replace(/\\{ \\{/gi, '{{').replace(/\\} \\}/gi, '}}')\n    .replace(/&lt;/gi, '<').replace(/&gt;/gi, '>');  // replace with < and > to render HTML in Angular\n\n    // Parse code with highlight.js depending on language\n    let highlightedCode: any = hljs.highlight(this.language, codeToParse, true);\n    highlightedCode.value = highlightedCode.value\n      .replace(/=<span class=\"hljs-value\">\"\"<\\/span>/gi, '')\n      .replace('<head>', '')\n      .replace('<head/>', '');\n    return highlightedCode.value;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TdHighlightComponent } from './highlight.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TdHighlightComponent,\n  ],\n  exports: [\n    TdHighlightComponent,\n  ],\n})\nexport class CovalentHighlightModule {\n\n}\n"]}