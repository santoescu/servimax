/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpParams } from '@angular/common/http';
import { tdHttpRESTParam } from '../params/abstract-param.decorator';
import { of } from 'rxjs';
/** @type {?} */
export var NOOP_HTTP = of(undefined);
/**
 * Method used to copy parameters from an array or HttpParams object
 * into a centrilized HttpParams object
 * \@internal
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
export function parseParams(target, source) {
    /** @type {?} */
    var queryParams = target;
    if (source instanceof HttpParams) {
        source.keys().forEach(function (key) {
            // skip if value is undefined
            if (((/** @type {?} */ (source))).get(key) !== undefined) {
                ((/** @type {?} */ (source))).getAll(key).forEach(function (value, index) {
                    if (index === 0) {
                        queryParams = queryParams.set(key, value);
                    }
                    else {
                        queryParams = queryParams.append(key, value);
                    }
                });
            }
        });
    }
    else {
        var _loop_1 = function (key) {
            // skip if value is undefined
            if ((/** @type {?} */ (source[key])) !== undefined) {
                if (source[key] instanceof Array) {
                    ((/** @type {?} */ (source[key]))).forEach(function (value, index) {
                        if (index === 0) {
                            queryParams = queryParams.set(key, value);
                        }
                        else {
                            queryParams = queryParams.append(key, value);
                        }
                    });
                }
                else {
                    queryParams = queryParams.set(key, (/** @type {?} */ (source[key])));
                }
            }
        };
        for (var key in source) {
            _loop_1(key);
        }
    }
    return queryParams;
}
/**
 * Abstract implementation of the http method decorator
 * \@internal
 * @param {?} config
 * @return {?}
 */
export function TdAbstractMethod(config) {
    return function (target, propertyName, descriptor) {
        /** @type {?} */
        var wrappedFunction = descriptor.value;
        // replace method call with our own and proxy it
        descriptor.value = function () {
            var e_1, _a, e_2, _b;
            try {
                /** @type {?} */
                var replacedPath = config.path;
                /** @type {?} */
                var parameters = Reflect.getOwnMetadata(tdHttpRESTParam, target, propertyName);
                /** @type {?} */
                var newArgs = [];
                /** @type {?} */
                var body = void 0;
                /** @type {?} */
                var queryParams = new HttpParams();
                if (parameters) {
                    try {
                        // map parameters and see which type they are to act on them
                        for (var parameters_1 = tslib_1.__values(parameters), parameters_1_1 = parameters_1.next(); !parameters_1_1.done; parameters_1_1 = parameters_1.next()) {
                            var parameter = parameters_1_1.value;
                            if (parameter.type === 'param') {
                                newArgs[parameter.index] = arguments[parameter.index];
                                replacedPath = replacedPath.replace(':' + parameter.param, arguments[parameter.index]);
                            }
                            else if (parameter.type === 'body') {
                                newArgs[parameter.index] = arguments[parameter.index];
                                body = arguments[parameter.index];
                            }
                            else if (parameter.type === 'queryParams') {
                                newArgs[parameter.index] = arguments[parameter.index];
                                /** @type {?} */
                                var qParams = arguments[parameter.index];
                                if (config.options && config.options.params) {
                                    queryParams = parseParams(queryParams, config.options.params);
                                }
                                if (qParams) {
                                    queryParams = parseParams(queryParams, qParams);
                                }
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (parameters_1_1 && !parameters_1_1.done && (_a = parameters_1.return)) _a.call(parameters_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                // tslint:disable-next-line
                /** @type {?} */
                var url = this.baseUrl + replacedPath;
                /** @type {?} */
                var options = Object.assign({}, config.options, {
                    body: body,
                    params: queryParams,
                });
                // tslint:disable-next-line
                /** @type {?} */
                var request = this.buildRequest(config.method, url, options);
                if (parameters) {
                    try {
                        // see which one was the response parameter so we can set the request observable
                        for (var parameters_2 = tslib_1.__values(parameters), parameters_2_1 = parameters_2.next(); !parameters_2_1.done; parameters_2_1 = parameters_2.next()) {
                            var parameter = parameters_2_1.value;
                            if (parameter.type === 'response') {
                                newArgs[parameter.index] = request;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (parameters_2_1 && !parameters_2_1.done && (_b = parameters_2.return)) _b.call(parameters_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                // tslint:disable-next-line
                /** @type {?} */
                var response = wrappedFunction.apply(this, newArgs);
                // if the response is NOOP_HTTP or undefined, then we return the request as it is
                // else we return the response from the inner function
                if (response === NOOP_HTTP || response === undefined) {
                    return request;
                }
                else {
                    return response;
                }
            }
            catch (error) {
                // tslint:disable-next-line
                console.error(error);
            }
        };
    };
}
//# sourceMappingURL=data:application/json;base64,