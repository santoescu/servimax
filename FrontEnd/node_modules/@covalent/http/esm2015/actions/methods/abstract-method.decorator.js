/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { HttpParams } from '@angular/common/http';
import { tdHttpRESTParam } from '../params/abstract-param.decorator';
import { of } from 'rxjs';
/** @type {?} */
export const NOOP_HTTP = of(undefined);
/**
 * Method used to copy parameters from an array or HttpParams object
 * into a centrilized HttpParams object
 * \@internal
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
export function parseParams(target, source) {
    /** @type {?} */
    let queryParams = target;
    if (source instanceof HttpParams) {
        source.keys().forEach((key) => {
            // skip if value is undefined
            if (((/** @type {?} */ (source))).get(key) !== undefined) {
                ((/** @type {?} */ (source))).getAll(key).forEach((value, index) => {
                    if (index === 0) {
                        queryParams = queryParams.set(key, value);
                    }
                    else {
                        queryParams = queryParams.append(key, value);
                    }
                });
            }
        });
    }
    else {
        for (let key in source) {
            // skip if value is undefined
            if ((/** @type {?} */ (source[key])) !== undefined) {
                if (source[key] instanceof Array) {
                    ((/** @type {?} */ (source[key]))).forEach((value, index) => {
                        if (index === 0) {
                            queryParams = queryParams.set(key, value);
                        }
                        else {
                            queryParams = queryParams.append(key, value);
                        }
                    });
                }
                else {
                    queryParams = queryParams.set(key, (/** @type {?} */ (source[key])));
                }
            }
        }
    }
    return queryParams;
}
/**
 * Abstract implementation of the http method decorator
 * \@internal
 * @param {?} config
 * @return {?}
 */
export function TdAbstractMethod(config) {
    return function (target, propertyName, descriptor) {
        /** @type {?} */
        let wrappedFunction = descriptor.value;
        // replace method call with our own and proxy it
        descriptor.value = function () {
            try {
                /** @type {?} */
                let replacedPath = config.path;
                /** @type {?} */
                let parameters = Reflect.getOwnMetadata(tdHttpRESTParam, target, propertyName);
                /** @type {?} */
                let newArgs = [];
                /** @type {?} */
                let body;
                /** @type {?} */
                let queryParams = new HttpParams();
                if (parameters) {
                    // map parameters and see which type they are to act on them
                    for (let parameter of parameters) {
                        if (parameter.type === 'param') {
                            newArgs[parameter.index] = arguments[parameter.index];
                            replacedPath = replacedPath.replace(':' + parameter.param, arguments[parameter.index]);
                        }
                        else if (parameter.type === 'body') {
                            newArgs[parameter.index] = arguments[parameter.index];
                            body = arguments[parameter.index];
                        }
                        else if (parameter.type === 'queryParams') {
                            newArgs[parameter.index] = arguments[parameter.index];
                            /** @type {?} */
                            let qParams = arguments[parameter.index];
                            if (config.options && config.options.params) {
                                queryParams = parseParams(queryParams, config.options.params);
                            }
                            if (qParams) {
                                queryParams = parseParams(queryParams, qParams);
                            }
                        }
                    }
                }
                // tslint:disable-next-line
                /** @type {?} */
                let url = this.baseUrl + replacedPath;
                /** @type {?} */
                let options = Object.assign({}, config.options, {
                    body: body,
                    params: queryParams,
                });
                // tslint:disable-next-line
                /** @type {?} */
                let request = this.buildRequest(config.method, url, options);
                if (parameters) {
                    // see which one was the response parameter so we can set the request observable
                    for (let parameter of parameters) {
                        if (parameter.type === 'response') {
                            newArgs[parameter.index] = request;
                        }
                    }
                }
                // tslint:disable-next-line
                /** @type {?} */
                let response = wrappedFunction.apply(this, newArgs);
                // if the response is NOOP_HTTP or undefined, then we return the request as it is
                // else we return the response from the inner function
                if (response === NOOP_HTTP || response === undefined) {
                    return request;
                }
                else {
                    return response;
                }
            }
            catch (error) {
                // tslint:disable-next-line
                console.error(error);
            }
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtbWV0aG9kLmRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bjb3ZhbGVudC9odHRwLyIsInNvdXJjZXMiOlsiYWN0aW9ucy9tZXRob2RzL2Fic3RyYWN0LW1ldGhvZC5kZWNvcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUdsRCxPQUFPLEVBQWUsZUFBZSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFFbEYsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFJdEMsTUFBTSxPQUFPLFNBQVMsR0FBb0IsRUFBRSxDQUFDLFNBQVMsQ0FBQzs7Ozs7Ozs7O0FBT3ZELE1BQU0sVUFBVSxXQUFXLENBQUMsTUFBa0IsRUFBRSxNQUF1RDs7UUFDakcsV0FBVyxHQUFlLE1BQU07SUFDcEMsSUFBSSxNQUFNLFlBQVksVUFBVSxFQUFFO1FBQ2hDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFXLEVBQUUsRUFBRTtZQUNwQyw2QkFBNkI7WUFDN0IsSUFBSSxDQUFDLG1CQUFZLE1BQU0sRUFBQSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsRUFBRTtnQkFDL0MsQ0FBQyxtQkFBWSxNQUFNLEVBQUEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFhLEVBQUUsS0FBYSxFQUFFLEVBQUU7b0JBQ3hFLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTt3QkFDZixXQUFXLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7cUJBQzNDO3lCQUFNO3dCQUNMLFdBQVcsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztxQkFDOUM7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7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LEVBQUUsT0FBTyxDQUFDLENBQUM7NkJBQ2pEO3lCQUNGO3FCQUNGO2lCQUNGOzs7b0JBRUcsR0FBRyxHQUFXLElBQUksQ0FBQyxPQUFPLEdBQUcsWUFBWTs7b0JBQ3pDLE9BQU8sR0FBK0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRTtvQkFDMUUsSUFBSSxFQUFFLElBQUk7b0JBQ1YsTUFBTSxFQUFFLFdBQVc7aUJBQ3BCLENBQUM7OztvQkFFRSxPQUFPLEdBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUM7Z0JBQ2pFLElBQUksVUFBVSxFQUFFO29CQUNkLGdGQUFnRjtvQkFDaEYsS0FBSyxJQUFJLFNBQVMsSUFBSSxVQUFVLEVBQUU7d0JBQ2hDLElBQUksU0FBUyxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7NEJBQ2pDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDO3lCQUNwQztxQkFDRjtpQkFDRjs7O29CQUVHLFFBQVEsR0FBUSxlQUFlLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7Z0JBQ3hELGlGQUFpRjtnQkFDakYsc0RBQXNEO2dCQUN0RCxJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtvQkFDcEQsT0FBTyxPQUFPLENBQUM7aUJBQ2hCO3FCQUFNO29CQUNMLE9BQU8sUUFBUSxDQUFDO2lCQUNqQjthQUNGO1lBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ2QsMkJBQTJCO2dCQUMzQixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3RCO1FBQ0gsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IFRkSHR0cE1ldGhvZCwgSVRkSHR0cFJFU1RPcHRpb25zLCBJVGRIdHRwUkVTVE9wdGlvbnNXaXRoQm9keSB9IGZyb20gJy4uLy4uL2h0dHAuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBUZFBhcmFtVHlwZSwgdGRIdHRwUkVTVFBhcmFtIH0gZnJvbSAnLi4vcGFyYW1zL2Fic3RyYWN0LXBhcmFtLmRlY29yYXRvcic7XG5cbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5cbmRlY2xhcmUgY29uc3QgUmVmbGVjdDogYW55O1xuXG5leHBvcnQgY29uc3QgTk9PUF9IVFRQOiBPYnNlcnZhYmxlPGFueT4gPSBvZih1bmRlZmluZWQpO1xuXG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIGNvcHkgcGFyYW1ldGVycyBmcm9tIGFuIGFycmF5IG9yIEh0dHBQYXJhbXMgb2JqZWN0XG4gKiBpbnRvIGEgY2VudHJpbGl6ZWQgSHR0cFBhcmFtcyBvYmplY3RcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VQYXJhbXModGFyZ2V0OiBIdHRwUGFyYW1zLCBzb3VyY2U6IEh0dHBQYXJhbXMgfCB7W2tleTogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW119KTogSHR0cFBhcmFtcyB7XG4gIGxldCBxdWVyeVBhcmFtczogSHR0cFBhcmFtcyA9IHRhcmdldDtcbiAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIEh0dHBQYXJhbXMpIHtcbiAgICBzb3VyY2Uua2V5cygpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICAvLyBza2lwIGlmIHZhbHVlIGlzIHVuZGVmaW5lZFxuICAgICAgaWYgKCg8SHR0cFBhcmFtcz5zb3VyY2UpLmdldChrZXkpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgKDxIdHRwUGFyYW1zPnNvdXJjZSkuZ2V0QWxsKGtleSkuZm9yRWFjaCgodmFsdWU6IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgcXVlcnlQYXJhbXMgPSBxdWVyeVBhcmFtcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1zID0gcXVlcnlQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQga2V5IGluIHNvdXJjZSkge1xuICAgICAgLy8gc2tpcCBpZiB2YWx1ZSBpcyB1bmRlZmluZWRcbiAgICAgIGlmICg8YW55PnNvdXJjZVtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHNvdXJjZVtrZXldIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAoPHN0cmluZ1tdPnNvdXJjZVtrZXldKS5mb3JFYWNoKCh2YWx1ZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgcXVlcnlQYXJhbXMgPSBxdWVyeVBhcmFtcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBxdWVyeVBhcmFtcyA9IHF1ZXJ5UGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBxdWVyeVBhcmFtcyA9IHF1ZXJ5UGFyYW1zLnNldChrZXksIDxhbnk+c291cmNlW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBxdWVyeVBhcmFtcztcbn1cblxuLyoqXG4gKiBBYnN0cmFjdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgaHR0cCBtZXRob2QgZGVjb3JhdG9yXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFRkQWJzdHJhY3RNZXRob2QoY29uZmlnOiB7XG4gIG1ldGhvZDogVGRIdHRwTWV0aG9kLFxuICBwYXRoOiBzdHJpbmcsXG4gIG9wdGlvbnM/OiBJVGRIdHRwUkVTVE9wdGlvbnMsXG59KTogRnVuY3Rpb24ge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogYW55LCBwcm9wZXJ0eU5hbWU6IHN0cmluZywgZGVzY3JpcHRvcjogVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8RnVuY3Rpb24+KTogYW55IHtcbiAgICBsZXQgd3JhcHBlZEZ1bmN0aW9uOiBGdW5jdGlvbiA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgLy8gcmVwbGFjZSBtZXRob2QgY2FsbCB3aXRoIG91ciBvd24gYW5kIHByb3h5IGl0XG4gICAgZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uICgpOiBhbnkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IHJlcGxhY2VkUGF0aDogc3RyaW5nID0gY29uZmlnLnBhdGg7XG4gICAgICAgIGxldCBwYXJhbWV0ZXJzOiB7IGluZGV4OiBudW1iZXIsIHBhcmFtOiBzdHJpbmcsIHR5cGU6IFRkUGFyYW1UeXBlIH1bXSA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEodGRIdHRwUkVTVFBhcmFtLCB0YXJnZXQsIHByb3BlcnR5TmFtZSk7XG4gICAgICAgIGxldCBuZXdBcmdzOiBhbnlbXSA9IFtdO1xuICAgICAgICBsZXQgYm9keTogYW55O1xuICAgICAgICBsZXQgcXVlcnlQYXJhbXM6IEh0dHBQYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xuICAgICAgICBpZiAocGFyYW1ldGVycykge1xuICAgICAgICAgIC8vIG1hcCBwYXJhbWV0ZXJzIGFuZCBzZWUgd2hpY2ggdHlwZSB0aGV5IGFyZSB0byBhY3Qgb24gdGhlbVxuICAgICAgICAgIGZvciAobGV0IHBhcmFtZXRlciBvZiBwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBpZiAocGFyYW1ldGVyLnR5cGUgPT09ICdwYXJhbScpIHtcbiAgICAgICAgICAgICAgbmV3QXJnc1twYXJhbWV0ZXIuaW5kZXhdID0gYXJndW1lbnRzW3BhcmFtZXRlci5pbmRleF07XG4gICAgICAgICAgICAgIHJlcGxhY2VkUGF0aCA9IHJlcGxhY2VkUGF0aC5yZXBsYWNlKCc6JyArIHBhcmFtZXRlci5wYXJhbSwgYXJndW1lbnRzW3BhcmFtZXRlci5pbmRleF0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbWV0ZXIudHlwZSA9PT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgIG5ld0FyZ3NbcGFyYW1ldGVyLmluZGV4XSA9IGFyZ3VtZW50c1twYXJhbWV0ZXIuaW5kZXhdO1xuICAgICAgICAgICAgICBib2R5ID0gYXJndW1lbnRzW3BhcmFtZXRlci5pbmRleF07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtZXRlci50eXBlID09PSAncXVlcnlQYXJhbXMnKSB7XG4gICAgICAgICAgICAgIG5ld0FyZ3NbcGFyYW1ldGVyLmluZGV4XSA9IGFyZ3VtZW50c1twYXJhbWV0ZXIuaW5kZXhdO1xuICAgICAgICAgICAgICBsZXQgcVBhcmFtczogSHR0cFBhcmFtcyB8IHtba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXX0gPSBhcmd1bWVudHNbcGFyYW1ldGVyLmluZGV4XTtcbiAgICAgICAgICAgICAgaWYgKGNvbmZpZy5vcHRpb25zICYmIGNvbmZpZy5vcHRpb25zLnBhcmFtcykge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1zID0gcGFyc2VQYXJhbXMocXVlcnlQYXJhbXMsIGNvbmZpZy5vcHRpb25zLnBhcmFtcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHFQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtcyA9IHBhcnNlUGFyYW1zKHF1ZXJ5UGFyYW1zLCBxUGFyYW1zKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5iYXNlVXJsICsgcmVwbGFjZWRQYXRoO1xuICAgICAgICBsZXQgb3B0aW9uczogSVRkSHR0cFJFU1RPcHRpb25zV2l0aEJvZHkgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWcub3B0aW9ucywge1xuICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgcGFyYW1zOiBxdWVyeVBhcmFtcyxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBsZXQgcmVxdWVzdDogYW55ID0gdGhpcy5idWlsZFJlcXVlc3QoY29uZmlnLm1ldGhvZCwgdXJsLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAvLyBzZWUgd2hpY2ggb25lIHdhcyB0aGUgcmVzcG9uc2UgcGFyYW1ldGVyIHNvIHdlIGNhbiBzZXQgdGhlIHJlcXVlc3Qgb2JzZXJ2YWJsZVxuICAgICAgICAgIGZvciAobGV0IHBhcmFtZXRlciBvZiBwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBpZiAocGFyYW1ldGVyLnR5cGUgPT09ICdyZXNwb25zZScpIHtcbiAgICAgICAgICAgICAgbmV3QXJnc1twYXJhbWV0ZXIuaW5kZXhdID0gcmVxdWVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGxldCByZXNwb25zZTogYW55ID0gd3JhcHBlZEZ1bmN0aW9uLmFwcGx5KHRoaXMsIG5ld0FyZ3MpO1xuICAgICAgICAvLyBpZiB0aGUgcmVzcG9uc2UgaXMgTk9PUF9IVFRQIG9yIHVuZGVmaW5lZCwgdGhlbiB3ZSByZXR1cm4gdGhlIHJlcXVlc3QgYXMgaXQgaXNcbiAgICAgICAgLy8gZWxzZSB3ZSByZXR1cm4gdGhlIHJlc3BvbnNlIGZyb20gdGhlIGlubmVyIGZ1bmN0aW9uXG4gICAgICAgIGlmIChyZXNwb25zZSA9PT0gTk9PUF9IVFRQIHx8IHJlc3BvbnNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuIl19